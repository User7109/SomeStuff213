local script = script
script.Name = ""
getfenv().script = nil
script.Parent = nil
interface = {}
local g
interface.__index = interface

function interface.init(_g)
	g = _g
	local self = {}
	setmetatable(self, interface)
	return self
end

function interface:start()
	self.gui = g.player.PlayerGui:WaitForChild("MainGui")
	self.damageColorCorrection = Instance.new("ColorCorrectionEffect", g.lighting)
	self.bleedingColorCorrection = Instance.new("ColorCorrectionEffect", g.lighting)
	self.backgroundColorCorrection = Instance.new("ColorCorrectionEffect", g.lighting)

	self.damageColorCorrection.Name = "damageColorCorrection"
	self.bleedingColorCorrection.Name = "bleedingColorCorrection"
	self.backgroundColorCorrection.Name = "backgroundColorCorrection"

	self.backgroundBlur = Instance.new("BlurEffect", g.lighting)
	self.snowstormBlur = Instance.new("BlurEffect", g.lighting)
	self.spyglassBlur = Instance.new("BlurEffect", g.lighting)
	self.nightVisionColorCorrection = Instance.new("ColorCorrectionEffect", g.lighting)
	self.backgroundShown = false
	self.lastInventoryToggle = tick()
	self.lastCraftingToggle = tick()
	self.lastShopToggle = tick()
	self.lastChat = tick()
	self.storeShown = false
	self.loadingGame = false
	self.menuShown = false
	self.poundsShown = false
	self.stockPoundsShown = false
	self.cursorShown = false
	self.hitmarkerShown = false
	self.transitionShown = false
	self.inventoryShown = false
	self.dropItemShown = false
	self.craftingShown = false
	self.settingsShown = false
	self.shopShown = false
	self.tutorialShown = false
	self.questShown = false
	self.noticeBoardShown = false
	self.travelShown = false
	self.currentShop = nil
	self.currentQuest = nil
	self.currentMenuTab = nil
	self.titleUsed = false
	self.stocksShown = false
	self.messageShown = false
	self.inventoryHovered = false
	self.equipmentHovered = false
	self.cursorHighlighted = false
	self.interactionShown = false
	self.interactionText = nil
	self.interactionHighlighted = false
	self.musicMuted = false
	self.itemTargetting = nil
	self.itemName = nil
	self.itemDragging = nil
	self.chatting = false
	self.respawnShown = false
	self.denyShown = false
	self.chatShown = false
	self.currentChatTab = ""
	self.chatTabs = {}
	self.whispering = false
	self.toolBarShown = false
	self.integrityShown = false
	self.bleedingShown = false
	self.currentStorage = nil
	self.currentTradingPost = nil
	self.titlesShown = false
	self.streamMode = false
	
	self.cooldown = false
	self.cooldown_time = 1.5

	self.backgroundBlur.Size = 0
	self.snowstormBlur.Size = 0
	self.spyglassBlur.Size = 0

	self.currentCategory = ""
	self.buying = false
	self.canLoot = true
	self.hasResetPosition = false

	self.gui.ResetPosition.Activated:Connect(function()
		self.gui.ResetPosition.Visible = false
		self.hasResetPosition = true
		local safezonepositionresetted = g.misc.request("resetPlayerPosition")
		if safezonepositionresetted then 
			self:newHint("Your position has been reset :o")
		end
	end)

	self.gui.Inventory.MouseEnter:Connect(function()
		self.inventoryHovered = true
	end)

	self.gui.Inventory.MouseLeave:Connect(function()
		self.inventoryHovered = false
	end)

	self.gui.Inventory.Equipment.MouseEnter:Connect(function()
		self.equipmentHovered = true
	end)

	self.gui.Inventory.Equipment.MouseLeave:Connect(function()
		self.equipmentHovered = false
	end)

	g.humanoid.CameraOffset = g.stats.arbs.cameraOffset

	self.gui.Chat.ChatBar.Focused:Connect(function()
		self:startChat()
	end)

	self.gui.Chat.ChatBar.FocusLost:Connect(function(enterPressed)
		self:endChat(enterPressed)
	end)

	self.gui.Chat.Whisper.Activated:Connect(function()
		self:toggleWhisper()
	end)

	self.gui.Chat.ChatBar:GetPropertyChangedSignal("Text"):Connect(function()
		if self.gui.Chat.ChatBar.Text == "/" then
			self.gui.Chat.ChatBar.Text = ""
		end
	end)

	local resetBindableEvent = Instance.new("BindableEvent")

	resetBindableEvent.Event:Connect(function()
		coroutine.wrap(g.misc.request)("downPlayer")
	end)

	local IsPlayerStaff = g.misc.checkIfPlayerisAdmin(g.player)

	if IsPlayerStaff == true then
		self:showAdminConsole()
	end

	g.starterGui:SetCore("ResetButtonCallback", resetBindableEvent)

	self:setupBank()
	self:setupTradingPost()
	self:setupStorage()
	self:setupLoot()
	self:setupIslands()
	self:setupTime()
	self:setupMuteMusic()
	self:setupBarber()


	if g.stats.places[game.PlaceId].conquering and not game:GetService("RunService"):IsStudio() then
		spawn(function()
			self:showTransition()
			task.wait(3)
			g.role:assignRole(g.teleportService:GetLocalPlayerTeleportData().role)
			self:showCursor()
			g.sounds.GlobalAmbient:Play()
			g.tween:TweenNumber(g.sounds.GlobalAmbient, "Volume", 0.3, 3, g.tween.Ease.In.Linear)
			self.gui.Menu.Visible = false
			self.gui.Chat.Visible = true
			task.wait(3)
			g.stance:respawn(true)
			task.wait(0.5)
			self:hideTransition()
			self:hideMenu()
			self:showGame()
		end)
	else
		self:showMenu()
	end
	
	self:showMenu()
end

function interface:setupMuteMusic()
	local muteMusicGui = self.gui.MuteMusic
	muteMusicGui.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenNumber(muteMusicGui, "ImageTransparency", 0, 0.1, g.tween.Ease.In.Linear)
	end)

	muteMusicGui.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenNumber(muteMusicGui, "ImageTransparency", 0.4, 0.1, g.tween.Ease.In.Linear)
	end)

	muteMusicGui.Activated:Connect(function()
		if self.musicMuted then
			self.musicMuted = false
			g.tween:TweenNumber(g.sounds.MusicSoundGroup, "Volume", 0.5, 1, g.tween.Ease.In.Linear)
			muteMusicGui.Image = g.stats.arbs.assetLink .. 1659270731
		else
			self.musicMuted = true
			g.tween:TweenNumber(g.sounds.MusicSoundGroup, "Volume", 0, 1, g.tween.Ease.In.Linear)
			muteMusicGui.Image = g.stats.arbs.assetLink .. 1659270168
		end
	end)
end

function interface:showTutorial()
	local tutorialGui = self.gui.TutorialPopup
	local currentTab = 0
	local hint = ""
	
	if not self.tutorialShown then
		self.tutorialShown = true
		self:hideToolbar()
		self:hideIntegrity()
		self:hideTabs()

		tutorialGui:TweenSizeAndPosition(UDim2.new(0.42,0,0.147,0), UDim2.new(0.5,0,0.75,0), "Out", "Linear", .2, true)
		tutorialGui.Title.Text = "TUTORIAL"
		
		tutorialGui.Next.MouseEnter:connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(tutorialGui.Next, "ImageColor3", Color3.fromRGB(255, 255, 255), .1, g.tween.Ease.In.Linear)
			g.tween:TweenColor3(tutorialGui.Next.Title, "TextColor3", Color3.fromRGB(0, 0, 0), .1, g.tween.Ease.In.Linear)
		end)

		tutorialGui.Next.MouseLeave:connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(tutorialGui.Next, "ImageColor3", Color3.fromRGB(70, 70, 70), .1, g.tween.Ease.In.Linear)
			g.tween:TweenColor3(tutorialGui.Next.Title, "TextColor3", Color3.fromRGB(255, 255, 255), .1, g.tween.Ease.In.Linear)
		end)
		
		local speech = {
			[1] = "There are many professions you can dive into, but lets start off the simplest one which is being a Lumberjack. To cut a tree, equip your AXE and aim your cursor on a tree, and HOLD E.",
			[2] = "There are a lot of ways to make money. You can mine, hunt, etc. The fastest way to make money is to sell items such as fur and tree logs in the general store.",
			[3] = "You are currently at your spawn point and safezone. When you leave a safezone, people will able to KILL and LOOT your items!",
			[4] = "The key to survival in this world is to team-up with others and work together. With your allies, you will be much stronger and you have their protection outside the safezones.",
			[5] = "Well, that is pretty much all you need to know lad. What you do next is up to you, goodluck!",
		}
		
		local function checkifCanGo()
			if currentTab == 0 then return true end
			if tutorialGui.Message.Text ~= speech[currentTab] then
				return false
			else
				return true
			end
		end

		tutorialGui.Next.MouseButton1Click:Connect(function()
			if not checkifCanGo() then return end
			currentTab += 1
			if currentTab > #speech then
				self:hideTutorial()
				g.misc.request("closePlayerTutorial")
				return
			end
			hint = speech[currentTab]

			coroutine.wrap(function()
				for i = 1, string.len(hint) do
					tutorialGui.Message.Text = string.sub(hint, 1, i)
					task.wait()
				end
			end)()
			self:unhighlightCursor()

		end)

		if currentTab == 1 then
			hint = "Welcome to the frontier "..g.player.Name.."! I am Thomas Chadwick, and I am one of the settlers. You must be new here but don't worry, I will teach you some of the basics to survive."
			coroutine.wrap(function()
				for i = 1, string.len(hint) do
					tutorialGui.Message.Text = string.sub(hint, 1, i)
					task.wait()
				end
			end)()
		end
	end
end

function interface:showMessage(prompttype, title, message, confirm)
	if not self.messageShown then
		self.messageShown = true
		local messageGui = self.gui.Message
		messageGui:TweenSizeAndPosition(
			UDim2.new(0, 400, 0, 400),
			UDim2.new(0.5, -200, 0.5, -250),
			"Out",
			"Linear",
			0.2,
			true
		)
		messageGui.Title.Text = title
		messageGui.Message.Text = message
		messageGui.Confirm.Title.Text = confirm or "Confirm"

		messageGui.Confirm.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				messageGui.Confirm,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				messageGui.Confirm.Title,
				"TextColor3",
				Color3.fromRGB(0, 0, 0),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		messageGui.Confirm.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				messageGui.Confirm,
				"ImageColor3",
				Color3.fromRGB(180, 170, 140),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				messageGui.Confirm.Title,
				"TextColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		messageGui.Confirm.Activated:Connect(function()
			self:hideMessage()
			self:unhighlightCursor()

			if prompttype == "Dailyreward" then
				local DailyRewardClaimed = g.misc.request("claimDailyReward")
				if DailyRewardClaimed then
					self:newHint("Your rewards are in your backpack!")

					if not workspace:FindFirstChild("SellItem") then
						local newsellitemsound = g.sounds.SellItem:Clone()
						newsellitemsound.Parent = workspace
						newsellitemsound:Play()

						newsellitemsound.Ended:Connect(function()
							task.wait()
							newsellitemsound:Remove()
						end)
					end
				end
			end
		end)
	end
end

function interface:hideMessage()
	local messageGui = self.gui.Message
	if self.messageShown then
		self.messageShown = false
		messageGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)
		g.tween:TweenColor3(
			messageGui.Confirm,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			messageGui.Confirm.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end
end

function interface:SelectAdminConsolePlayer(SelectedPlayerName)
	if not g.playersService:FindFirstChild(SelectedPlayerName) then
		return --// player doesnt exist
	end

	local SelectedPlayer = g.playersService:FindFirstChild(SelectedPlayerName)

	local adminConsoleGui = self.gui.AdminConsole
	local adminConsoleCommands = adminConsoleGui:FindFirstChild("Commands")
	local adminnConsoleTextboxes = adminConsoleCommands:FindFirstChild("TextBoxes")

	--// textboxes
	local UsernameBoxFrameMain = adminnConsoleTextboxes:FindFirstChild("Username")
	local UsernameBoxFrame = UsernameBoxFrameMain:FindFirstChild("Username")
	local UsernameTextbox = UsernameBoxFrame:FindFirstChild("usernamebox")

	local UserroleBoxFrameMain = adminnConsoleTextboxes:FindFirstChild("Role")
	local UserroleBoxFrame = UserroleBoxFrameMain:FindFirstChild("Role")
	local UserroleBoxFramebox = UserroleBoxFrame:FindFirstChild("rolebox")

	UsernameTextbox.Text = SelectedPlayerName

	if SelectedPlayer:FindFirstChild("Status") then
		--// making sure player is spawned in
		local SelectedPlayerStatusFolder = SelectedPlayer:FindFirstChild("Status")
		local SelectedPlayerRole = SelectedPlayerStatusFolder:FindFirstChild("Role")
		UserroleBoxFramebox.Text = tostring(SelectedPlayerRole.Value)
	end
end

function interface:showAdminConsole()
	local adminConsoleGui = self.gui.AdminConsole
	local adminConsoleShow = self.gui.ShowAdminConsole
	local adminConsoleOpened = false

	local playerlist = adminConsoleGui:FindFirstChild("playerlist")
	local commandsframeroot = adminConsoleGui:FindFirstChild("Commands")

	local commandsframe = commandsframeroot:FindFirstChild("Commands")
	local textboxesframe = commandsframeroot:FindFirstChild("TextBoxes")

	--// textboxes
	local AmountFrameroot = textboxesframe:FindFirstChild("Amount")
	local ItemNameFrameroot = textboxesframe:FindFirstChild("Itemname")
	local ReasonFrameroot = textboxesframe:FindFirstChild("Reason")
	local RoleFrameroot = textboxesframe:FindFirstChild("Role")
	local UsernameFrameroot = textboxesframe:FindFirstChild("Username")

	local AmountFrame = AmountFrameroot:FindFirstChild("Amount")
	local ItemNameFrame = ItemNameFrameroot:FindFirstChild("Itemname")
	local ReasonFrame = ReasonFrameroot:FindFirstChild("Reason")
	local RoleFrame = RoleFrameroot:FindFirstChild("Role")
	local UsernameFrame = UsernameFrameroot:FindFirstChild("Username")

	local banplayerframe = commandsframe:FindFirstChild("Ban")
	local unbanplayerframe = commandsframe:FindFirstChild("Unban")
	local givepoundsframe = commandsframe:FindFirstChild("Givepounds")
	local givebankspaceframe = commandsframe:FindFirstChild("Givebankspace")
	local godmodeframe = commandsframe:FindFirstChild("GodMode")
	local spawnitemframe = commandsframe:FindFirstChild("SpawnItem")
	local teleporttoframe = commandsframe:FindFirstChild("TeleportTo")

	adminConsoleShow.Visible = true
	commandsframe.CanvasSize = UDim2.new(0, 0, 2, commandsframe.Commandsgridlayout.AbsoluteContentSize.Y + 35)

	banplayerframe.Banbtn.Activated:Connect(function()
		local SelectedPlayerName = UsernameFrame.usernamebox
		local SelectedPlayerRole = RoleFrame.rolebox
		local SelectedPlayerBanReason = ReasonFrame.Reasonbox

		if SelectedPlayerBanReason.Text == "" then
			self:newHint("Specify the ban reason!")
			return
		end

		if string.len(SelectedPlayerBanReason.Text) > 35 then
			self:newHint("Banreason must be less than 35 characters")
			return
		end

		if SelectedPlayerName.Text == "" then
			self:newHint("Specify the player name!")
			return
		end

		local playerbanned =
			g.misc.request("banPlayer", tostring(SelectedPlayerName.Text), tostring(SelectedPlayerBanReason.Text))

		if playerbanned == true then
			self:newHint("Successfully banned " .. SelectedPlayerName.Text .. " ")
		end
	end)

	unbanplayerframe.Unbanbtn.Activated:Connect(function()
		local SelectedPlayerName = UsernameFrame.usernamebox
		local SelectedPlayerRole = RoleFrame.rolebox

		if SelectedPlayerName.Text == "" then
			self:newHint("Specify the player name!")
			return
		end

		local playerbanned = g.misc.request("unbanPlayer", tostring(SelectedPlayerName.Text))

		if playerbanned == true then
			self:newHint("Successfully unbanned " .. tostring(SelectedPlayerName.Text) .. " ")
		end
	end)

	givepoundsframe.Givepoundsbtn.Activated:Connect(function()
		local SelectedPlayerName = UsernameFrame.usernamebox
		local SelectedPlayerRole = RoleFrame.rolebox
		local SelectedPlayerPoundsAmount = AmountFrame.Amountbox

		if SelectedPlayerPoundsAmount.Text == "" then
			self:newHint("Specify the pounds amount!")
			return
		end

		if SelectedPlayerName.Text == "" then
			self:newHint("Specify the player name!")
			return
		end

		self:newHint(
			"Giving "
				.. tostring(SelectedPlayerName.Text)
				.. " "
				.. tostring(SelectedPlayerPoundsAmount.Text)
				.. " pounds. They will recieve the gift within 30 seconds."
		)

		local poundsgiven = g.misc.request(
			"setPlayerPounds",
			SelectedPlayerName.Text,
			SelectedPlayerRole.Text,
			tonumber(SelectedPlayerPoundsAmount.Text)
		)

		if poundsgiven == false then
			self:newHint(
				"There was a problem giving "
					.. tostring(SelectedPlayerName.Text)
					.. " "
					.. tostring(SelectedPlayerPoundsAmount.Text)
					.. " pounds."
			)
		end
	end)

	--[[givebankspaceframe.Givebankspacebtn.Activated:Connect(function()
		local SelectedPlayerName = UsernameFrame.usernamebox
		local SelectedPlayerRole = RoleFrame.rolebox
		local SelectedPlayerBankspaceAmount = AmountFrame.Amountbox

		if SelectedPlayerBankspaceAmount.Text == "" then
			self:newHint("Specify the Bank Space amount!")
			return
		end

		if SelectedPlayerName.Text == "" then
			self:newHint("Specify the player name!")
			return
		end

		self:newHint(
			"Set "
				.. tostring(SelectedPlayerName.Text)
				.. " "
				.. tostring(SelectedPlayerBankspaceAmount.Text)
				.. " Bank space. There bankspace will be set in 30 seconds!"
		)

		local spacegiven = g.misc.request(
			"SetStorageSpace",
			SelectedPlayerName.Text,
			SelectedPlayerRole.Text,
			tonumber(SelectedPlayerBankspaceAmount.Text)
		)

		if spacegiven == false then
			self:newHint(
				"There was a problem giving "
					.. tostring(SelectedPlayerName.Text)
					.. " "
					.. tostring(SelectedPlayerBankspaceAmount.Text)
					.. " Bank space."
			)
		end
	end)--]]

	godmodeframe.GodModebtn.Activated:Connect(function()
		local SelectedPlayerName = UsernameFrame.usernamebox
		local SelectedPlayerRole = RoleFrame.rolebox

		if SelectedPlayerName.Text == "" then
			self:newHint("Specify the player name!")
			return
		end

		local godmodegiven =
			g.misc.request("GodModePlayer", tostring(SelectedPlayerName.Text), tostring(SelectedPlayerRole.Text))

		if godmodegiven == true then
			self:newHint("Successfully updated godmode state for " .. tostring(SelectedPlayerName.Text) .. " ")
		end
	end)

	spawnitemframe.SpawnItembtn.Activated:Connect(function()
		local SelectedPlayerName = UsernameFrame.usernamebox
		local SelectedPlayerRole = RoleFrame.rolebox
		local SelectedPlayerItemAmount = AmountFrame.Amountbox
		local SelectedPlayerItemName = ItemNameFrame.Itembox

		if SelectedPlayerItemAmount.Text == "" then
			self:newHint("Specify the item amount!")
			return
		end

		if SelectedPlayerItemName.Text == "" then
			self:newHint("Specify the item name!")
			return
		end

		if SelectedPlayerName.Text == "" then
			self:newHint("Specify the player name!")
			return
		end

		self:newHint(
			"Giving "
				.. SelectedPlayerName.Text
				.. " "
				.. SelectedPlayerItemAmount.Text
				.. " "
				.. SelectedPlayerItemName.Text
				.. ". They will recieve the gift within 30 seconds."
		)

		local spawneditem = g.misc.request(
			"givePlayerItem",
			tostring(SelectedPlayerName.Text),
			tostring(SelectedPlayerRole.Text),
			tonumber(SelectedPlayerItemAmount.Text),
			SelectedPlayerItemName.Text
		)

		if spawneditem == false then
			self:newHint(
				"Something went wrong giving "
					.. SelectedPlayerName.Text
					.. " "
					.. SelectedPlayerItemAmount.Text
					.. " "
					.. SelectedPlayerItemName.Text
					.. "..."
			)
		end
	end)

	teleporttoframe.TeleportTobtn.Activated:Connect(function()
		local SelectedPlayerName = UsernameFrame.usernamebox
		local SelectedPlayerRole = RoleFrame.rolebox

		if SelectedPlayerName.Text == "" then
			self:newHint("Specify the player name!")
			return
		end

		local teleportedtoplayer =
			g.misc.request("teleporToPlayer", tostring(SelectedPlayerName.Text), tostring(SelectedPlayerRole.Text))

		if teleportedtoplayer == true then
		end
	end)

	for i, v in pairs(g.playersService:GetPlayers()) do
		local newplayerselectionframe = g.guis.PlayerSelection:Clone()

		newplayerselectionframe.Name = v.Name
		newplayerselectionframe.plrbtn.name.Text = v.Name

		newplayerselectionframe.plrbtn.Activated:Connect(function()
			self:SelectAdminConsolePlayer(newplayerselectionframe.Name)
		end)

		newplayerselectionframe.Parent = playerlist.playersroot.players

		playerlist.playersroot.CanvasSize =
			UDim2.new(0, 0, 2, playerlist.playersroot.players.playerlistlayout.AbsoluteContentSize.Y + 35)
	end

	g.playersService.PlayerAdded:Connect(function(newplayer)
		if playerlist.playersroot.players:FindFirstChild(newplayer.Name) then
			return
		end

		local newplayerselectionframe = g.guis.PlayerSelection:Clone()
		newplayerselectionframe.Name = newplayer.Name
		newplayerselectionframe.plrbtn.name.Text = newplayer.Name
		newplayerselectionframe.Parent = playerlist.playersroot.players

		playerlist.playersroot.CanvasSize =
			UDim2.new(0, 0, 2, playerlist.playersroot.players.playerlistlayout.AbsoluteContentSize.Y + 65)

		newplayerselectionframe.plrbtn.Activated:Connect(function()
			self:SelectAdminConsolePlayer(newplayerselectionframe.Name)
		end)
	end)

	g.playersService.PlayerRemoving:Connect(function(playerthatleft)
		if playerlist.playersroot.players:FindFirstChild(playerthatleft.Name) then
			local playerlisttoremove = playerlist.playersroot.players:FindFirstChild(playerthatleft.Name)
			playerlisttoremove:Remove()
			playerlist.playersroot.CanvasSize =
				UDim2.new(0, 0, 2, playerlist.playersroot.players.playerlistlayout.AbsoluteContentSize.Y + 65)
		end
	end)

	adminConsoleShow.Action.Activated:Connect(function()
		if not adminConsoleOpened then
			adminConsoleShow.Action.Text = "< Hide Admin Console >"
			adminConsoleGui.Visible = true
			adminConsoleOpened = true
			self:hideToolbar()
		else
			adminConsoleShow.Action.Text = "< Show Admin Console >"
			adminConsoleGui.Visible = false
			adminConsoleOpened = false
			self:showToolbar()
		end
	end)
end

function interface:setupTime()
	local timeGui = self.gui.Time
	g.lighting:GetPropertyChangedSignal("TimeOfDay"):Connect(function()
		timeGui.Text = string.sub(g.lighting.TimeOfDay, 1, 5)
	end)
end

function interface:showTime()
	local timeGui = self.gui.Time
	if not self.timeShown then
		self.timeShown = true
		timeGui:TweenPosition(UDim2.new(0.5, 0, 0, 50), "Out", "Linear", 0.4, true)
	end
end

function interface:hideTime()
	local timeGui = self.gui.Time
	if self.timeShown then
		self.timeShown = false
		timeGui:TweenPosition(UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.4, true)
	end
end

function interface:showTabs()
	local tabsGui = self.gui.Tabs
	if not self.tabsShown then
		self.tabsShown = true
		tabsGui:TweenPosition(UDim2.new(1, -100, 0.5, -250), "Out", "Linear", 0.2, true)

		for i, v in pairs(tabsGui:GetChildren()) do
			if v.ClassName ~= "UIGridLayout" then
				v.MouseEnter:Connect(function()
					self:highlightCursor()
					g.tween:TweenColor3(v.Title, "TextColor3", g.stats.colors.highlighted, 0.1, g.tween.Ease.In.Linear)
					if v:FindFirstChild("New") then
						g.tween:TweenNumber(v.New, "ImageTransparency", 1, 0.1, g.tween.Ease.In.Linear)
						g.tween:TweenNumber(v.New.Title, "TextTransparency", 1, 0.1, g.tween.Ease.In.Linear)
						g.debris:AddItem(v.New, 0.1)
					end
				end)

				v.MouseLeave:Connect(function()
					self:unhighlightCursor()
					g.tween:TweenColor3(
						v.Title,
						"TextColor3",
						Color3.fromRGB(219, 254, 255),
						0.1,
						g.tween.Ease.In.Linear
					)
				end)

				v.Activated:Connect(function()
					if self["toggle" .. v.Name](self) then
						self["toggle" .. v.Name](self)
					end
				end)
			end
		end
	end
end

function interface:hideTabs()
	local tabsGui = self.gui.Tabs
	if self.tabsShown then
		tabsGui:TweenPosition(UDim2.new(1, -100, 2.5, -250), "Out", "Linear", 0.2, true)
		self.tabsShown = false
	end
end

function interface:setupBank()
	local bankGui = self.gui.Bank

	bankGui.Storage.Close.MouseEnter:connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(bankGui.Storage.Close, "ImageColor3", Color3.fromRGB(255, 255, 255), .1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(bankGui.Storage.Close.Title, "TextColor3", Color3.fromRGB(0, 0, 0), .1, g.tween.Ease.In.Linear)
	end)

	bankGui.Storage.Close.MouseLeave:connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(bankGui.Storage.Close, "ImageColor3", Color3.fromRGB(180, 170, 140), .1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(bankGui.Storage.Close.Title, "TextColor3", Color3.fromRGB(255, 255, 255), .1, g.tween.Ease.In.Linear)
	end)

	bankGui.Storage.Close.Activated:connect(function()
		self:hideBank()
		self:unhighlightCursor()
	end)

	bankGui.Backpack.PoundsDeposit.MouseEnter:Connect(function()
		g.tween:TweenNumber(bankGui.Backpack.PoundsDeposit, "TextTransparency", 0, .1, g.tween.Ease.In.Linear)
		self:highlightCursor()
	end)

	bankGui.Backpack.PoundsDeposit.MouseLeave:Connect(function()
		g.tween:TweenNumber(bankGui.Backpack.PoundsDeposit, "TextTransparency", .4, .1, g.tween.Ease.In.Linear)
		self:unhighlightCursor()
	end)

	bankGui.Backpack.PoundsAmount.FocusLost:Connect(function()
		local pounds = tonumber(bankGui.Backpack.PoundsAmount.Text)
		if not pounds or pounds > g.inventory.pounds then
			pounds = math.floor(pounds)
			bankGui.Backpack.PoundsAmount.Text = g.inventory.pounds
		end
	end)

	bankGui.Backpack.PoundsDeposit.Activated:Connect(function()
		g.misc.request("depositPounds", math.floor(tonumber(bankGui.Backpack.PoundsAmount.Text)))
		task.wait(0.125)
		self:refreshBankPounds()
		self:unhighlightCursor()
	end)

	bankGui.Storage.PoundsWithdraw.MouseEnter:Connect(function()
		g.tween:TweenNumber(bankGui.Storage.PoundsWithdraw, "TextTransparency", 0, .1, g.tween.Ease.In.Linear)
		self:highlightCursor()
	end)

	bankGui.Storage.PoundsWithdraw.MouseLeave:Connect(function()
		g.tween:TweenNumber(bankGui.Storage.PoundsWithdraw, "TextTransparency", .4, .1, g.tween.Ease.In.Linear)
		self:unhighlightCursor()
	end)

	bankGui.Storage.PoundsAmount.FocusLost:Connect(function()
		local pounds = math.floor(tonumber(bankGui.Storage.PoundsAmount.Text))
		if not pounds or pounds > g.inventory.bankPounds then
			bankGui.Storage.PoundsAmount.Text = g.inventory.bankPounds
		end
	end)

	bankGui.Storage.PoundsWithdraw.Activated:Connect(function()
		g.misc.request("withdrawPounds", math.floor(tonumber(bankGui.Storage.PoundsAmount.Text)))
		task.wait(0.125)
		self:refreshBankPounds()
		self:unhighlightCursor()
	end)
end

function interface:setupTradingPost()
	local tradingPostGui = self.gui.TradingPost

	tradingPostGui.Information.Close.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			tradingPostGui.Information.Close,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			tradingPostGui.Information.Close.Title,
			"TextColor3",
			Color3.fromRGB(0, 0, 0),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	tradingPostGui.Information.Close.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			tradingPostGui.Information.Close,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			tradingPostGui.Information.Close.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	tradingPostGui.Information.Close.Activated:Connect(function()
		self:hideTradingPost()
		self:unhighlightCursor()
	end)
end

function interface:setupStorage()
	local storageGui = self.gui.Storage

	storageGui.Storage.Close.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			storageGui.Storage.Close,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			storageGui.Storage.Close.Title,
			"TextColor3",
			Color3.fromRGB(0, 0, 0),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	storageGui.Storage.Close.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			storageGui.Storage.Close,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			storageGui.Storage.Close.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	storageGui.Storage.Close.Activated:Connect(function()
		self:hideStorage()
		self:unhighlightCursor()
	end)
end

function interface:setupLoot()
	local lootGui = self.gui.Loot

	lootGui.Close.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(lootGui.Close, "ImageColor3", Color3.fromRGB(81, 77, 65), 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(lootGui.Close.Title, "TextColor3", Color3.fromRGB(0, 0, 0), 0.1, g.tween.Ease.In.Linear)
	end)

	lootGui.Close.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(lootGui.Close, "ImageColor3", Color3.fromRGB(180, 170, 140), 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			lootGui.Close.Title,
			"TextColor3",
			Color3.fromRGB(101, 96, 81),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	lootGui.Close.Activated:Connect(function()
		self:hideLoot()
		self:unhighlightCursor()
	end)
end

function interface:setupBarber()
	local barberGui = self.gui.Barber

	self.currentBarberColorIndex = 1
	self.currentBarberHairIndex = 0
	self.currentBarberFacialHairIndex = 0
	barberGui.Confirm.Title.Text = "Confirm (" .. g.stats.arbs.barberCost .. " pounds)"

	barberGui.NextColor.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			barberGui.NextColor,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.NextColor.Title,
			"TextColor3",
			Color3.fromRGB(0, 0, 0),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.NextColor.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			barberGui.NextColor,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.NextColor.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.NextColor.Activated:Connect(function()
		self.currentBarberColorIndex = self.currentBarberColorIndex + 1
		if self.currentBarberColorIndex > #g.stats.arbs.hairColors then
			self.currentBarberColorIndex = 1
		end
		self:refreshBarber()
	end)

	barberGui.PreviousColor.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			barberGui.PreviousColor,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.PreviousColor.Title,
			"TextColor3",
			Color3.fromRGB(0, 0, 0),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.PreviousColor.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			barberGui.PreviousColor,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.PreviousColor.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.PreviousColor.Activated:Connect(function()
		self.currentBarberColorIndex = self.currentBarberColorIndex - 1
		if self.currentBarberColorIndex == 0 then
			self.currentBarberColorIndex = #g.stats.arbs.hairColors
		end
		self:refreshBarber()
	end)

	barberGui.NextHair.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			barberGui.NextHair,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.NextHair.Title,
			"TextColor3",
			Color3.fromRGB(0, 0, 0),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.NextHair.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			barberGui.NextHair,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.NextHair.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.NextHair.Activated:Connect(function()
		self.currentBarberHairIndex = self.currentBarberHairIndex + 1
		if self.currentBarberHairIndex > #g.objects.Hair:GetChildren() then
			self.currentBarberHairIndex = 0
		end
		barberGui.NextFacialHair.Visible = self.currentBarberHairIndex < g.stats.arbs.firstFemaleHairIndex
		barberGui.PreviousFacialHair.Visible = self.currentBarberHairIndex < g.stats.arbs.firstFemaleHairIndex
		barberGui.NextColor.Visible = self.currentBarberHairIndex > 0 or self.currentBarberFacialHairIndex > 0
		barberGui.PreviousColor.Visible = self.currentBarberHairIndex > 0 or self.currentBarberFacialHairIndex > 0
		self:refreshBarber()
	end)

	barberGui.PreviousHair.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			barberGui.PreviousHair,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.PreviousHair.Title,
			"TextColor3",
			Color3.fromRGB(0, 0, 0),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.PreviousHair.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			barberGui.PreviousHair,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.PreviousHair.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.PreviousHair.Activated:Connect(function()
		self.currentBarberHairIndex = self.currentBarberHairIndex - 1
		if self.currentBarberHairIndex < 0 then
			self.currentBarberHairIndex = #g.objects.Hair:GetChildren()
		end
		barberGui.NextFacialHair.Visible = self.currentBarberHairIndex < g.stats.arbs.firstFemaleHairIndex
		barberGui.PreviousFacialHair.Visible = self.currentBarberHairIndex < g.stats.arbs.firstFemaleHairIndex
		barberGui.NextColor.Visible = self.currentBarberHairIndex > 0 or self.currentBarberFacialHairIndex > 0
		barberGui.PreviousColor.Visible = self.currentBarberHairIndex > 0 or self.currentBarberFacialHairIndex > 0
		self:refreshBarber()
	end)

	barberGui.NextFacialHair.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			barberGui.NextFacialHair,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.NextFacialHair.Title,
			"TextColor3",
			Color3.fromRGB(0, 0, 0),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.NextFacialHair.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			barberGui.NextFacialHair,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.NextFacialHair.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.NextFacialHair.Activated:Connect(function()
		self.currentBarberFacialHairIndex = self.currentBarberFacialHairIndex + 1
		if self.currentBarberFacialHairIndex > #g.objects.FacialHair:GetChildren() then
			self.currentBarberFacialHairIndex = 0
		end
		barberGui.NextColor.Visible = self.currentBarberHairIndex > 0 or self.currentBarberFacialHairIndex > 0
		barberGui.PreviousColor.Visible = self.currentBarberHairIndex > 0 or self.currentBarberFacialHairIndex > 0
		self:refreshBarber()
	end)

	barberGui.PreviousFacialHair.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			barberGui.PreviousFacialHair,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.PreviousFacialHair.Title,
			"TextColor3",
			Color3.fromRGB(0, 0, 0),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.PreviousFacialHair.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			barberGui.PreviousFacialHair,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.PreviousFacialHair.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.PreviousFacialHair.Activated:Connect(function()
		self.currentBarberFacialHairIndex = self.currentBarberFacialHairIndex - 1
		if self.currentBarberFacialHairIndex < 0 then
			self.currentBarberFacialHairIndex = #g.objects.FacialHair:GetChildren()
		end
		barberGui.NextColor.Visible = self.currentBarberHairIndex > 0 or self.currentBarberFacialHairIndex > 0
		barberGui.PreviousColor.Visible = self.currentBarberHairIndex > 0 or self.currentBarberFacialHairIndex > 0
		self:refreshBarber()
	end)

	barberGui.Cancel.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(barberGui.Cancel, "ImageColor3", Color3.fromRGB(101, 96, 81), 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(barberGui.Cancel.Title, "TextColor3", Color3.fromRGB(0, 0, 0), 0.1, g.tween.Ease.In.Linear)
	end)

	barberGui.Cancel.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(barberGui.Cancel, "ImageColor3", Color3.fromRGB(101, 96, 81), 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			barberGui.Cancel.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.Cancel.Activated:Connect(function()
		self:unhighlightCursor()
		g.stance:standH()
	end)



	barberGui.Confirm.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			barberGui.Confirm,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(barberGui.Confirm.Title, "TextColor3", Color3.fromRGB(0, 0, 0), 0.1, g.tween.Ease.In.Linear)
	end)

	barberGui.Confirm.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			barberGui.Confirm,
			"ImageColor3",
			Color3.fromRGB(180, 170, 140),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			barberGui.Confirm.Title,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	barberGui.Confirm.Activated:Connect(function()
		if
			g.misc.request(
				"updatePlayerHair",
				self.currentBarberColorIndex,
				self.currentBarberHairIndex,
				self.currentBarberFacialHairIndex
			)
		then
			g.stance:standH()
			self:unhighlightCursor()
		else
			self:newHint("You do not have enough pounds")
		end
	end)
end

function interface:showBarber()
	local barberGui = self.gui.Barber
	if not self.barberShown then
		g.stance:endStances()
		self.barberShown = true
		barberGui:TweenSizeAndPosition(
			UDim2.new(0, 800, 0, 600),
			UDim2.new(0.5, -400, 0.5, -200),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:hideToolbar()
		self:showPounds()

		for i, v in pairs(g.inventory.equipment) do
			if v.stats.origin == "Head" then
				v:unequip()
			end
		end
		for i, v in pairs(g.character:GetChildren()) do
			if v:IsA("Accessory") then
				for j, k in pairs(v:GetChildren()) do
					if k:IsA("BasePart") then
						g.tween:TweenNumber(k, "Transparency", 1, 0.5, g.tween.Ease.In.Linear)
					end
				end
			end
		end
		if g.character.Attachments:FindFirstChild("Hair") then
			g.character.Attachments.Hair.Hair.Transparency = 1
		end
		if g.character.Attachments:FindFirstChild("FacialHair") then
			g.character.Attachments.FacialHair.Hair.Transparency = 1
		end

		self:refreshBarber()
	end
end

function interface:refreshBarber()
	if self.barberShown then
		if g.mouseFilter:FindFirstChild("HairPreview") then
			g.mouseFilter.HairPreview:Destroy()
		end
		if self.currentBarberHairIndex > 0 then
			local hair = g.objects.Hair[self.currentBarberHairIndex]:Clone()
			g.misc.weldModel(hair)
			hair.Name = "HairPreview"
			hair:SetPrimaryPartCFrame(g.character.Head.CFrame)
			local weldObject = Instance.new("Weld", hair.PrimaryPart)
			weldObject.Part0 = hair.PrimaryPart
			weldObject.Part1 = g.character.Head
			weldObject.C0 = hair.PrimaryPart.CFrame:inverse() * g.character.Head.CFrame
			hair.Hair.BrickColor = BrickColor.new(g.stats.arbs.hairColors[self.currentBarberColorIndex])
			hair.Parent = g.mouseFilter
		end

		if g.mouseFilter:FindFirstChild("FacialHairPreview") then
			g.mouseFilter.FacialHairPreview:Destroy()
		end
		if
			self.currentBarberFacialHairIndex > 0
			and self.currentBarberHairIndex < g.stats.arbs.firstFemaleHairIndex
		then
			local facialHair = g.objects.FacialHair[self.currentBarberFacialHairIndex]:Clone()
			g.misc.weldModel(facialHair)
			facialHair.Name = "FacialHairPreview"
			facialHair:SetPrimaryPartCFrame(g.character.Head.CFrame)
			local weldObject = Instance.new("Weld", facialHair.PrimaryPart)
			weldObject.Part0 = facialHair.PrimaryPart
			weldObject.Part1 = g.character.Head
			weldObject.C0 = facialHair.PrimaryPart.CFrame:inverse() * g.character.Head.CFrame
			facialHair.Hair.BrickColor = BrickColor.new(g.stats.arbs.hairColors[self.currentBarberColorIndex])
			facialHair.Parent = g.mouseFilter
		end
	end
end

function interface:hideBarber()
	local barberGui = self.gui.Barber
	if self.barberShown then
		self.barberShown = false
		self:unhighlightCursor()

		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end

		self:hidePounds()
		barberGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)

		if g.mouseFilter:FindFirstChild("HairPreview") then
			g.mouseFilter.HairPreview:Destroy()
		end
		if g.mouseFilter:FindFirstChild("FacialHairPreview") then
			g.mouseFilter.FacialHairPreview:Destroy()
		end
		delay(0.5, function()
			if g.character.Attachments:FindFirstChild("Hair") then
				g.character.Attachments.Hair.Hair.Transparency = 0
			else
				for i, v in pairs(g.character:GetChildren()) do
					if v:IsA("Accessory") then
						for j, k in pairs(v:GetChildren()) do
							if k:IsA("BasePart") then
								k.Transparency = 0
							end
						end
					end
				end
			end
			if g.character.Attachments:FindFirstChild("FacialHair") then
				g.character.Attachments.FacialHair.Hair.Transparency = 0
			end
		end)

		g.sounds.Haircut:Stop()
	end
end

function interface:showBank()
	local bankGui = self.gui.Bank
	if not self.bankShown then
		g.stance:endStances()
		self.bankShown = true
		bankGui:TweenSizeAndPosition(
			UDim2.new(0, 700, 0, 500),
			UDim2.new(0.5, -350, 0.5, -250),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:showBackground()
		self:hideToolbar()
		g.stance:updateWalkSpeed()

		if not workspace:FindFirstChild("ShowInventory") then
			local newshowinventorysound = g.sounds.ShowInventory:Clone()
			newshowinventorysound.Parent = workspace
			newshowinventorysound:Play()

			newshowinventorysound.Ended:Connect(function()
				task.wait()
				newshowinventorysound:Remove()
			end)
		end
		self:showPounds()
		self:refreshBankItems()
		self:refreshBankPounds()
	end
end

function interface:refreshBankItems()
	local bankGui = self.gui.Bank
	for i, v in pairs(bankGui.Storage.List:GetChildren()) do
		if v:IsA("Frame") then
			v:Destroy()
		end
	end

	bankGui.Storage.Title.Text = "Items in bank - " .. #g.inventory.bankItems
	bankGui.Backpack.Title.Text = "Items in backpack - " .. #g.inventory.backpack

	local bankStorageSpaceTaken = 0
	for i, v in pairs(g.inventory.bankItems) do
		if g.stats.items[v].weight ~= nil then
			bankStorageSpaceTaken = bankStorageSpaceTaken + g.stats.items[v].weight
			local bankItem = bankGui.Storage.List:FindFirstChild(v)
			if bankItem then
				bankItem.Quantity.Text = tonumber(bankItem.Quantity.Text) + 1
			else
				bankItem = g.guis.BankItem:Clone()
				bankItem.Name = v
				bankItem.Title.Text = v
				bankItem.Quantity.Text = "1"
				bankItem.Move.Text = "WITHDRAW"
				bankItem.Parent = bankGui.Storage.List

				bankItem.Move.MouseEnter:Connect(function()
					self:highlightCursor()
					g.tween:TweenNumber(bankItem.Move, "TextTransparency", 0, .1, g.tween.Ease.In.Linear)
				end)

				bankItem.Move.MouseLeave:Connect(function()
					self:unhighlightCursor()
					g.tween:TweenNumber(bankItem.Move, "TextTransparency", .4, .1, g.tween.Ease.In.Linear)
				end)

				bankItem.Move.Activated:Connect(function()
					self:unhighlightCursor()
					g.misc.request("takeBank",v,true)
					self:refreshBankItems()
				end)
			end
		else
			print("Tell a developer of TNF to look at "..g.inventory.bankItems[v].name)
		end
	end

	bankGui.Storage.Title.Details.Text = bankStorageSpaceTaken .. " / " .. g.player.Status.BankStorageSpace.Value .. " space taken"

	for i, v in pairs(bankGui.Backpack.List:GetChildren()) do
		if v:IsA("Frame") then
			v:Destroy()
		end
	end

	local backpackSpaceTaken = 0

	for i, v in pairs(g.inventory.backpack) do
		if not g.stats.items[v.name].illegal or g.role.name == "HBC" then
			local bankItem = bankGui.Backpack.List:FindFirstChild(v.name)
			backpackSpaceTaken = backpackSpaceTaken + v.stats.weight
			if bankItem then
				bankItem.Quantity.Text = tonumber(bankItem.Quantity.Text) + 1
			else
				bankItem = g.guis.BankItem:Clone()
				bankItem.Name = v.name
				bankItem.Title.Text = v.name
				bankItem.Quantity.Text = "1"
				bankItem.Move.Text = "DEPOSIT"
				bankItem.Parent = bankGui.Backpack.List

				bankItem.Move.MouseEnter:Connect(function()
					self:highlightCursor()
					g.tween:TweenNumber(bankItem.Move, "TextTransparency", 0, .1, g.tween.Ease.In.Linear)
				end)

				bankItem.Move.MouseLeave:Connect(function()
					self:unhighlightCursor()
					g.tween:TweenNumber(bankItem.Move, "TextTransparency", .4, .1, g.tween.Ease.In.Linear)
				end)

				bankItem.Move.Activated:Connect(function()
					if g.misc.request("storeBank", v.name,true) then
						self:refreshBankItems()
					else
						-- not enough space to store item or error occured
					end
					self:unhighlightCursor()
				end)
			end
		end

		bankGui.Backpack.Title.Details.Text = backpackSpaceTaken .. " / " .. g.inventory.maxWeight .. " space taken"
		bankGui.Storage.List.CanvasSize = UDim2.new(0, 0, 0, #bankGui.Storage.List:GetChildren() * 70)
	end
end

function interface:refreshBankPounds()
	local bankGui = self.gui.Bank
	g.inventory.pounds = (math.floor(g.inventory.pounds))
	g.inventory.bankPounds = (math.floor(g.inventory.bankPounds))
	bankGui.Backpack.PoundsAmount.Text = g.inventory.pounds
	bankGui.Storage.PoundsAmount.Text = g.inventory.bankPounds
end

function interface:hideBank()
	local bankGui = self.gui.Bank
	if self.bankShown then
		self.bankShown = false
		self:unhighlightCursor()
		self:hideBackground()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.stance:updateWalkSpeed()
		self:hidePounds()

		local newhideinventorysound = g.sounds.HideInventory:Clone()
		newhideinventorysound.Parent = workspace
		newhideinventorysound:Play()

		newhideinventorysound.Ended:Connect(function()
			task.wait()
			newhideinventorysound:Remove()
		end)

		bankGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:showTradingPost(tradingPost)
	local tradingPostGui = self.gui.TradingPost
	if not self.tradingPostShown then
		g.stance:endStances()
		self.tradingPostShown = true
		self.currentTradingPost = tradingPost
		tradingPostGui:TweenSizeAndPosition(
			UDim2.new(0, 1100, 0, 400),
			UDim2.new(0.5, -550, 0.5, -200),
			"Out",
			"Quad",
			0.5,
			true
		)
		self:showBackground()
		self:hideToolbar()
		g.stance:updateWalkSpeed()
		self:showPounds()
		self:refreshTradingPostItems()
		tradingPostGui.Backpack.Visible = tradingPost.owner == g.player

		local itemsGui = tradingPostGui.Items

		itemsGui.Title.Text = tradingPost.owner.Name .. "'s trading post"
		itemsGui.Title.Details.Text = "Profits from purchases go to " .. tradingPost.owner.Name
	end
end

function interface:refreshTradingPostItems()
	if self.currentTradingPost then
		local tradingPostGui = self.gui.TradingPost
		local itemsGui = tradingPostGui.Items

		for i, v in pairs(itemsGui.List:GetChildren()) do
			if v:IsA("Frame") then
				v:Destroy()
			end
		end

		local amounts = {}

		for i, v in pairs(self.currentTradingPost.items) do
			local item = g.item.new(v)
			local shopItemGui = itemsGui.List:FindFirstChild(v) or g.guis.ShopItem:Clone()
			shopItemGui.Title.Text = v

			if not amounts[v] then
				amounts[v] = 0
			end

			amounts[v] = amounts[v] + 1
			local itemCost = self.currentTradingPost.costs[v]
			local enoughPounds = g.inventory.pounds >= itemCost
			local free = itemCost == 0

			shopItemGui.Name = v
			shopItemGui.Title.Text = shopItemGui.Title.Text
			shopItemGui.Requirements.Stock.Text = amounts[v] .. " in stock"

			if free or self.currentTradingPost.owner == g.player then
				shopItemGui.Transaction.Text = "TAKE"
			else
				shopItemGui.Transaction.Text = "PURCHASE"
			end

			shopItemGui.Requirements.Cost.Text = itemCost .. " pound(s)"

			if self.currentTradingPost.owner == g.player then
				shopItemGui.Amount.Display.ImageTransparency = 0
				shopItemGui.Amount.TextTransparency = 0
				shopItemGui.Amount.Text = itemCost
				shopItemGui.Amount.FocusLost:Connect(function()
					local _itemCost = tonumber(shopItemGui.Amount.Text)
					if _itemCost then
						g.misc.request("setItemTradingPostCost", v, _itemCost)
						self:refreshTradingPostItems()
					else
						shopItemGui.Amount.Text = itemCost
					end
				end)
			end

			if enoughPounds or free or self.currentTradingPost.owner == g.player then
				shopItemGui.Transaction.MouseEnter:Connect(function()
					if not g.economy.transactionInProgress then
						self:highlightCursor()
					end
				end)

				shopItemGui.Transaction.MouseLeave:Connect(function()
					if not g.economy.transactionInProgress then
						self:unhighlightCursor()
					end
				end)

				shopItemGui.Transaction.Activated:Connect(function()
					if not g.economy.transactionInProgress and self.buying == false then
						self.buying = true
						if free or self.currentTradingPost.owner == g.player then
							shopItemGui.Transaction.Text = "TAKING"
						else
							shopItemGui.Transaction.Text = "PURCHASING"
						end

						if not workspace:FindFirstChild("PurchaseItem") then
							local newpurchaseitemsound = g.sounds.PurchaseItem:Clone()
							newpurchaseitemsound.Parent = workspace
							newpurchaseitemsound:Play()

							newpurchaseitemsound.Ended:Connect(function()
								task.wait()
								newpurchaseitemsound:Remove()
							end)
						end

						g.economy:purchaseItemTradingPost(self.currentTradingPost, v)
						self:refreshTradingPostItems(self.currentTradingPost)
						self:unhighlightCursor()
						task.wait(1)
						self.buying = false
					end
				end)
			else
				shopItemGui.Transaction.TextTransparency = 1

				if not enoughPounds then
					shopItemGui.Requirements.Cost.TextTransparency = 0.5
				end
			end

			shopItemGui.MouseEnter:Connect(function()
				g.tween:TweenColor3(
					shopItemGui.Display,
					"ImageColor3",
					Color3.fromRGB(139, 139, 139),
					0.1,
					g.tween.Ease.In.Linear
				)
				self:showItem(item, "TradingPost")
			end)

			shopItemGui.MouseLeave:Connect(function()
				g.tween:TweenColor3(
					shopItemGui.Display,
					"ImageColor3",
					Color3.fromRGB(109, 109, 109),
					0.1,
					g.tween.Ease.In.Linear
				)
				self:hideItem(item, "TradingPost")
			end)

			shopItemGui.Parent = itemsGui.List
		end

		itemsGui.List.CanvasSize = UDim2.new(0, 0, 0, #itemsGui.List:GetChildren() * 120)

		if self.currentTradingPost.owner == g.player then
			for i, v in pairs(tradingPostGui.Backpack.List:GetChildren()) do
				if v:IsA("Frame") then
					v:Destroy()
				end
			end

			for i, v in pairs(g.inventory.backpack) do
				local bankItem = tradingPostGui.Backpack.List:FindFirstChild(v.name)
				if bankItem then
					bankItem.Quantity.Text = tonumber(bankItem.Quantity.Text) + 1
				else --if v.canBeDropped == true then
					bankItem = g.guis.BankItem:Clone()
					bankItem.Name = v.name
					bankItem.Title.Text = v.name
					bankItem.Quantity.Text = "1"
					bankItem.Move.Text = "PUT ON SALE"
					bankItem.Parent = tradingPostGui.Backpack.List

					bankItem.Move.MouseEnter:Connect(function()
						self:highlightCursor()
						g.tween:TweenColor3(
							bankItem.Move,
							"TextColor3",
							g.stats.colors.highlighted,
							0.1,
							g.tween.Ease.In.Linear
						)
					end)

					bankItem.Move.MouseLeave:Connect(function()
						self:unhighlightCursor()
						g.tween:TweenColor3(
							bankItem.Move,
							"TextColor3",
							Color3.fromRGB(255, 255, 255),
							0.1,
							g.tween.Ease.In.Linear
						)
					end)

					bankItem.Move.Activated:Connect(function()
						g.misc.request("storeTradingPost", v.name)
						self:refreshBankItems()
						self:unhighlightCursor()
					end)

					tradingPostGui.Backpack.Title.Details.Text = #g.inventory.backpack .. " spots taken"
					tradingPostGui.Backpack.List.CanvasSize =
						UDim2.new(0, 0, 0, (#tradingPostGui.Backpack.List:GetChildren() - 1) * 120)
				end
			end
		end
	end
end

function interface:hideTradingPost()
	local tradingPostGui = self.gui.TradingPost
	if self.tradingPostShown then
		self.tradingPostShown = false
		self.currentTradingPost = nil
		self:unhighlightCursor()
		self:hideBackground()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.stance:updateWalkSpeed()
		self:hidePounds()

		local newhideinventorysound = g.sounds.HideInventory:Clone()
		newhideinventorysound.Parent = workspace
		newhideinventorysound:Play()

		newhideinventorysound.Ended:Connect(function()
			task.wait()
			newhideinventorysound:Remove()
		end)

		tradingPostGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:showStorage(storage)
	local storageGui = self.gui.Storage
	if not self.storageShown then
		g.stance:endStances()
		self.storageShown = true
		self.currentStorage = storage
		storageGui:TweenSizeAndPosition(
			UDim2.new(0, 800, 0, 500),
			UDim2.new(0.5, -400, 0.5, -250),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:showBackground()
		self:hideToolbar()
		g.stance:updateWalkSpeed()
		self:refreshStorageItems()
		storageGui.Storage.Title.Text = storage.name
	end
end

function interface:refreshStorageItems()
	local storageGui = self.gui.Storage
	if self.currentStorage then
		storageGui.Storage.Title.Text = "Items in storage - " .. #self.currentStorage.items
		storageGui.Backpack.Title.Text = "Items in backpack - " .. #g.inventory.backpack

		for i, v in pairs(storageGui.Storage.List:GetChildren()) do
			if v:IsA("Frame") then
				v:Destroy()
			end
		end

		for i, v in pairs(self.currentStorage.items) do
			local storageItem = storageGui.Storage.List:FindFirstChild(v)
			if storageItem then
				storageItem.Quantity.Text = tonumber(storageItem.Quantity.Text) + 1
			else
				storageItem = g.guis.BankItem:Clone()
				storageItem.Name = v
				storageItem.Title.Text = v
				storageItem.Quantity.Text = "1"
				storageItem.Move.Text = "TAKE"
				storageItem.Parent = storageGui.Storage.List

				storageItem.Move.MouseEnter:Connect(function()
					self:highlightCursor()
					g.tween:TweenNumber(storageItem.Move, "TextTransparency", 0, 0.1, g.tween.Ease.In.Linear)
				end)

				storageItem.Move.MouseLeave:Connect(function()
					self:unhighlightCursor()
					g.tween:TweenNumber(storageItem.Move, "TextTransparency", 0.4, 0.1, g.tween.Ease.In.Linear)
				end)

				storageItem.Move.Activated:Connect(function()
					self:unhighlightCursor()
					g.misc.request("takeStorage", v, self.currentStorage.model,true)
					self:refreshStorageItems()
				end)
			end
		end

		for i, v in pairs(storageGui.Backpack.List:GetChildren()) do
			if v:IsA("Frame") then
				v:Destroy()
			end
		end

		local backpackSpaceTaken = 0

		for i, v in pairs(g.inventory.backpack) do
			local storageItem = storageGui.Backpack.List:FindFirstChild(v.name)
			backpackSpaceTaken = backpackSpaceTaken + v.stats.weight
			if storageItem then
				storageItem.Quantity.Text = tonumber(storageItem.Quantity.Text) + 1
			else --if v.canBeDropped == true then
				storageItem = g.guis.BankItem:Clone()
				storageItem.Name = v.name
				storageItem.Title.Text = v.name
				storageItem.Quantity.Text = "1"
				storageItem.Move.Text = "STORE"
				storageItem.Parent = storageGui.Backpack.List

				storageItem.Move.MouseEnter:Connect(function()
					self:highlightCursor()
					g.tween:TweenNumber(storageItem.Move, "TextTransparency", 0, 0.1, g.tween.Ease.In.Linear)
				end)

				storageItem.Move.MouseLeave:Connect(function()
					self:unhighlightCursor()
					g.tween:TweenNumber(storageItem.Move, "TextTransparency", 0.4, 0.1, g.tween.Ease.In.Linear)
				end)

				storageItem.Move.Activated:Connect(function()
					g.misc.request("storeStorage", v.name, self.currentStorage.model,true)
					task.wait(0.125)
					self:refreshStorageItems()
					self:unhighlightCursor()
				end)
			end
		end
		storageGui.Backpack.Title.Details.Text = backpackSpaceTaken .. " / " .. g.inventory.maxWeight .. " space taken"
		storageGui.Backpack.List.CanvasSize = UDim2.new(0, 0, 0, #g.inventory.backpack * 75)
	end
end

function interface:hideStorage()
	local storageGui = self.gui.Storage
	if self.storageShown then
		self.storageShown = false
		self.currentStorage = nil
		self:unhighlightCursor()
		self:hideBackground()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.stance:updateWalkSpeed()
		g.sounds.HideInventory:Play()
		storageGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:showCabinet(storage)
	local storageGui = self.gui.Storage
	if not self.storageShown then
		g.stance:endStances()
		self.storageShown = true
		self.currentStorage = storage
		storageGui:TweenSizeAndPosition(
			UDim2.new(0, 800, 0, 500),
			UDim2.new(0.5, -400, 0.5, -250),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:showBackground()
		self:hideToolbar()
		g.stance:updateWalkSpeed()
		self:refreshCabinetItems()
		storageGui.Storage.Title.Text = storage.name
	end
end

function interface:refreshCabinetItems()
	local storageGui = self.gui.Storage
	if self.currentStorage then
		storageGui.Storage.Title.Text = "Items in storage - " .. #self.currentStorage.items
		storageGui.Backpack.Title.Text = "Items in backpack - " .. #g.inventory.backpack

		for i, v in pairs(storageGui.Storage.List:GetChildren()) do
			if v:IsA("Frame") then
				v:Destroy()
			end
		end

		for i, v in pairs(self.currentStorage.items) do
			local storageItem = storageGui.Storage.List:FindFirstChild(v)
			if storageItem then
				storageItem.Quantity.Text = tonumber(storageItem.Quantity.Text) + 1
			else
				storageItem = g.guis.BankItem:Clone()
				storageItem.Name = v
				storageItem.Title.Text = v
				storageItem.Quantity.Text = "1"
				storageItem.Move.Text = "TAKE"
				storageItem.Parent = storageGui.Storage.List

				storageItem.Move.MouseEnter:Connect(function()
					self:highlightCursor()
					g.tween:TweenNumber(storageItem.Move, "TextTransparency", 0, 0.1, g.tween.Ease.In.Linear)
				end)

				storageItem.Move.MouseLeave:Connect(function()
					self:unhighlightCursor()
					g.tween:TweenNumber(storageItem.Move, "TextTransparency", 0.4, 0.1, g.tween.Ease.In.Linear)
				end)

				storageItem.Move.Activated:Connect(function()
					self:unhighlightCursor()
					g.misc.request("takeStorage", v, self.currentStorage.model,true)
					self:refreshCabinetItems()
				end)
			end
		end

		for i, v in pairs(storageGui.Backpack.List:GetChildren()) do
			if v:IsA("Frame") then
				v:Destroy()
			end
		end

		local backpackSpaceTaken = 0

		for i, v in pairs(g.inventory.backpack) do
			local storageItem = storageGui.Backpack.List:FindFirstChild(v.name)
			backpackSpaceTaken = backpackSpaceTaken + v.stats.weight
			if storageItem then
				storageItem.Quantity.Text = tonumber(storageItem.Quantity.Text) + 1
			else --if v.canBeDropped == true then
				storageItem = g.guis.BankItem:Clone()
				storageItem.Name = v.name
				storageItem.Title.Text = v.name
				storageItem.Quantity.Text = "1"
				storageItem.Move.Text = "STORE"
				storageItem.Parent = storageGui.Backpack.List

				storageItem.Move.MouseEnter:Connect(function()
					self:highlightCursor()
					g.tween:TweenNumber(storageItem.Move, "TextTransparency", 0, 0.1, g.tween.Ease.In.Linear)
				end)

				storageItem.Move.MouseLeave:Connect(function()
					self:unhighlightCursor()
					g.tween:TweenNumber(storageItem.Move, "TextTransparency", 0.4, 0.1, g.tween.Ease.In.Linear)
				end)

				storageItem.Move.Activated:Connect(function()
					g.misc.request("storeStorage", v.name, self.currentStorage.model,true)
					self:refreshCabinetItems()
					self:unhighlightCursor()
				end)
			end
		end
		storageGui.Backpack.Title.Details.Text = backpackSpaceTaken .. " / " .. g.inventory.maxWeight .. " space taken"
		storageGui.Backpack.List.CanvasSize = UDim2.new(0, 0, 0, #g.inventory.backpack * 75)
	end
end

function interface:hideCabinet()
	local storageGui = self.gui.Storage
	if self.storageShown then
		self.storageShown = false
		self.currentStorage = nil
		self:unhighlightCursor()
		self:hideBackground()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.stance:updateWalkSpeed()
		g.sounds.HideInventory:Play()
		storageGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:showLoot(player)
	local lootGui = self.gui.Loot
	if not self.lootShown then
		g.stance:endStances()
		self.lootShown = true
		self.currentLootedPlayer = player

		if self.canLoot == false then
			self.canLoot = true
		end

		lootGui:TweenSizeAndPosition(
			UDim2.new(0, 300, 0, 400),
			UDim2.new(1, -450, 0.5, -250),
			"Out",
			"Linear",
			0.2,
			true
		)

		if not workspace:FindFirstChild("ShowInventory") then
			local newshowinventorysound = g.sounds.ShowInventory:Clone()
			newshowinventorysound.Parent = workspace
			newshowinventorysound:Play()

			newshowinventorysound.Ended:Connect(function()
				task.wait()
				newshowinventorysound:Remove()
			end)
		end

		self:refreshLootItems()

		lootGui.Title.Text = player.name .. "'s loot"
	end
end

function interface:refreshLootItems()
	local lootGui = self.gui.Loot
	if self.currentLootedPlayer then
		if self.currentLootedPlayer.items ~= nil then
			lootGui.Title.Details.Text = "Items in player - " .. #self.currentLootedPlayer.items
		else
			lootGui.Title.Details.Text = "Items in player - "
		end
		for i, v in pairs(lootGui.List:GetChildren()) do
			if v:IsA("Frame") then
				v:Destroy()
			end
		end

		for i, v in pairs(self.currentLootedPlayer.items) do
			local lootItem = lootGui.List:FindFirstChild(v)
			if lootItem then
				lootItem.Quantity.Text = tonumber(lootItem.Quantity.Text) + 1
			else
				lootItem = g.guis.LootItem:Clone()
				lootItem.Name = v
				lootItem.Title.Text = v
				lootItem.Quantity.Text = "1"
				lootItem.Move.Text = "LOOT"
				lootItem.Parent = lootGui.List

				lootItem.Move.MouseEnter:Connect(function()
					self:highlightCursor()
					g.tween:TweenNumber(lootItem.Move, "TextTransparency", 0, 0.1, g.tween.Ease.In.Linear)
				end)

				lootItem.Move.MouseLeave:Connect(function()
					self:unhighlightCursor()
					g.tween:TweenNumber(lootItem.Move, "TextTransparency", 0.4, 0.1, g.tween.Ease.In.Linear)
				end)

				lootItem.Move.Activated:Connect(function() 
					if self.canLoot == true then
						if not self.currentLootedPlayer then
							return
						end

						self.canLoot = false
						self:unhighlightCursor()
						self.currentLootedPlayer:lootItem(v)
						self:refreshLootItems()
						task.wait(0.120)
						self.canLoot = true
					end
				end)
			end
		end
	end
end

function interface:hideLoot()
	local lootGui = self.gui.Loot
	if self.lootShown then
		self.lootShown = false
		self.currentLootedPlayer = nil
		self:unhighlightCursor()
		g.sounds.HideInventory:Play()
		lootGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(1, 0, 0.5, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:setupIslands()
	local islandsGui = self.gui.Islands



	for i, v in pairs(g.storage.Islands:GetChildren()) do
		if not islandsGui.Map:FindFirstChild(v.Name) then
			warn("Island frame not found under maps for " .. v.Name)
			return
		end

		local islandGui = islandsGui.Map:FindFirstChild(v.Name)


		if tonumber(v.Name) ~= game.PlaceId then
			islandGui.Travel.Visible = true

			islandGui.Travel.MouseEnter:Connect(function()
				self:highlightCursor()
				g.tween:TweenColor3(islandGui.Travel,"ImageColor3",Color3.fromRGB(255, 255, 255),0.1,g.tween.Ease.In.Linear)
				g.tween:TweenColor3(islandGui.Travel.Title,"TextColor3",Color3.fromRGB(0, 0, 0),0.1,g.tween.Ease.In.Linear)
			end)

			islandGui.Travel.MouseLeave:Connect(function()
				self:unhighlightCursor()
				g.tween:TweenColor3(islandGui.Travel,"ImageColor3",Color3.fromRGB(180, 170, 140),0.1,g.tween.Ease.In.Linear)
				g.tween:TweenColor3(islandGui.Travel.Title,"TextColor3",Color3.fromRGB(255, 255, 255),0.1,g.tween.Ease.In.Linear)
			end)

			islandGui.Travel.Activated:Connect(function()
				self:unhighlightCursor()
				islandGui.Travel.Visible = false
				self:newHint("Please wait, checking server availability")
				local result = g.misc.request("travelPlayerIsland", v.Name)
				if result == "faction" then
					self:newHint("You must be in a faction to travel to islands")
				elseif result == "playerAmount" then
					self:newHint("The server seems to be full, please try again later")
				elseif result == "alreadyTeleporting" then
					self:newHint("You are already attempting to travel to an island")
				elseif result == "tradingPostPlaced" then
					self:newHint("You can not travel while you have a trading post placed!")
				end
				self:refreshIslands()
				islandGui.Travel.Visible = true
			end)
		end

		v.Faction.Changed:Connect(function()
			self:refreshIslands()
		end)

		v.PlayerAmount.Changed:Connect(function()
			self:refreshIslands()
		end)
	end


	if g.stats.places[game.PlaceId].conquering then
		islandsGui.Map.Back.Visible = true

		islandsGui.Map.Back.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(islandsGui.Map.Back,"ImageColor3",Color3.fromRGB(255, 255, 255),0.1,g.tween.Ease.In.Linear)
			g.tween:TweenColor3(islandsGui.Map.Back.Title,"TextColor3",Color3.fromRGB(0, 0, 0),0.1,g.tween.Ease.In.Linear)
		end)
		islandsGui.Map.Back.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(islandsGui.Map.Back,"ImageColor3",Color3.fromRGB(180, 170, 140),0.1,g.tween.Ease.In.Linear)
			g.tween:TweenColor3(islandsGui.Map.Back.Title,"TextColor3",Color3.fromRGB(255, 255, 255),0.1,g.tween.Ease.In.Linear)
		end)

		islandsGui.Map.Back.Activated:Connect(function()
			self:unhighlightCursor()
			islandsGui.Map.Back.Visible = false
			g.teleportService:Teleport(g.stats.arbs.mainPlaceID, g.player)
		end)
	end
end


function interface:showIslands()
	local islandsGui = self.gui.Islands
	if not self.islandsShown then
		g.stance:endStances()
		self.islandsShown = true

		islandsGui:TweenSizeAndPosition(
			UDim2.new(0, 1000, 0, 700),
			UDim2.new(0.5, -500, 0.5, -350),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:showBackground()
		self:hideToolbar()
		g.stance:updateWalkSpeed()
		local newshowinventorysound = g.sounds.ShowInventory:Clone()
		newshowinventorysound.Parent = workspace
		newshowinventorysound:Play()

		newshowinventorysound.Ended:Connect(function()
			task.wait()
			newshowinventorysound:Remove()
		end)

		islandsGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				islandsGui.Close,
				"ImageColor3",
				g.stats.colors.highlighted,
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		islandsGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				islandsGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		islandsGui.Close.Activated:Connect(function()
			self:hideIslands()
			self:unhighlightCursor()
		end)

		self:refreshIslands()
	end
end

function interface:refreshIslands()
	local islandsGui = self.gui.Islands
	for i, v in pairs(g.storage.Islands:GetChildren()) do
		local placeStats = g.stats.places[tonumber(v.Name)]
		if placeStats.conquering and v.Name ~= game.PlaceId then
			local islandFolder = g.storage.Islands:FindFirstChild(v.Name)
			local islandGui = islandsGui.Map:FindFirstChild(v.Name)

			if not islandGui then
				warn("Island frame not found under maps for " .. v.Name)
				return
			end

			islandGui.Title.Text = placeStats.name

			local owningFaction = islandFolder.Faction.Value
			local playerAmount = islandFolder.PlayerAmount.Value

			if owningFaction == 0 then
				islandGui.FactionName.Text = "Unclaimed"
				islandGui.FactionName.TextColor3 = Color3.fromRGB(140, 120, 100)
				islandGui.FactionEmblem.Image = ""
			else
				islandGui.FactionName.Text = g.storage.Factions[owningFaction].FName.Value
				islandGui.FactionName.TextColor3 = g.storage.Factions[owningFaction].AcronymColor.Value
				islandGui.FactionEmblem.Image = g.storage.Factions[owningFaction].Emblem.Value
			end

			islandGui.Subtitle.Text = tostring(playerAmount) .. " / 50 online player(s)"
		end
	end
end

function interface:hideIslands()
	local islandsGui = self.gui.Islands
	if self.islandsShown then
		self.islandsShown = false
		self:unhighlightCursor()
		self:hideBackground()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.stance:updateWalkSpeed()
		g.sounds.HideInventory:Play()
		islandsGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:showBounties()
	local bountiesGui = self.gui.Bounties
	if not self.bountiesShown then
		g.stance:endStances()
		self.bountiesShown = true

		bountiesGui:TweenSizeAndPosition(
			UDim2.new(0, 500, 0, 600),
			UDim2.new(0.5, -250, 0.5, -300),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:showBackground()
		self:hideToolbar()
		g.stance:updateWalkSpeed()

		local newshowinventorysound = g.sounds.ShowInventory:Clone()
		newshowinventorysound.Parent = workspace
		newshowinventorysound:Play()

		newshowinventorysound.Ended:Connect(function()
			task.wait()
			newshowinventorysound:Remove()
		end)

		bountiesGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				bountiesGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				bountiesGui.Close.Title,
				"TextColor3",
				Color3.fromRGB(0, 0, 0),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		bountiesGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				bountiesGui.Close,
				"ImageColor3",
				Color3.fromRGB(180, 170, 140),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				bountiesGui.Close.Title,
				"TextColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		bountiesGui.Close.Activated:Connect(function()
			self:hideBounties()
			self:unhighlightCursor()
		end)

		self:refreshBounties()

		spawn(function()
			while task.wait(60) and self.bountiesShown do
				self:refreshBounties()
			end
		end)
	end
end

function interface:refreshBounties()
	local bountiesGui = self.gui.Bounties
	for i, v in pairs(bountiesGui.List:GetChildren()) do
		if v:IsA("Frame") and v.Name ~= "A" and v.Name ~= "C" then
			v:Destroy()
		end
	end
	for i, v in pairs(g.playersService:GetPlayers()) do
		if v:FindFirstChild("Status") and v ~= g.player or v.Status.Bounty.Value ~= 0 then
			local playerBountyGui = g.guis.PlayerBounty:Clone()
			if v ~= g.player then
				local amountOffered = g.stats.arbs.minimumBountyOffer
				if v.Status.Bounty.Value == 0 then
					playerBountyGui.Title.Text = v.Name
				else
					playerBountyGui.Title.Text = v.Name .. " (" .. v.Status.Bounty.Value .. " pounds)"
				end
				playerBountyGui.Amount.Text = amountOffered
				playerBountyGui.Amount.Visible = true
				playerBountyGui.Offer.Visible = true

				playerBountyGui.Amount.FocusLost:Connect(function()
					local _amountOffered = tonumber(playerBountyGui.Amount.Text)
					if _amountOffered then
						_amountOffered = math.min(g.stats.arbs.maximumBountyOffer, _amountOffered)
						_amountOffered = math.max(g.stats.arbs.minimumBountyOffer, _amountOffered)
						amountOffered = _amountOffered
					end
					playerBountyGui.Amount.Text = amountOffered
				end)

				playerBountyGui.Offer.MouseEnter:Connect(function()
					self:highlightCursor()
					g.tween:TweenNumber(playerBountyGui.Offer, "TextTransparency", 0, 0.1, g.tween.Ease.In.Linear)
				end)

				playerBountyGui.Offer.MouseLeave:Connect(function()
					self:unhighlightCursor()
					g.tween:TweenNumber(playerBountyGui.Offer, "TextTransparency", 0.4, 0.1, g.tween.Ease.In.Linear)
				end)

				playerBountyGui.Offer.Activated:Connect(function()
					local amountTaken = g.misc.request("offerBounty", v, amountOffered)
					if amountTaken then
						self:newHint("You offer a bounty of " .. amountTaken .. " pounds on " .. v.Name .. "'s head")
						self:refreshBounties()
					else
						self:newHint("You do not have enough pounds or player is no longer in this server")
					end
				end)
			else
				playerBountyGui.Title.Text = "YOU (" .. v.Status.Bounty.Value .. " pounds)"
				playerBountyGui.Title.TextColor3 = g.stats.colors.damage
				playerBountyGui.Title.TextStrokeTransparency = 0.6
			end

			if v.Status.Bounty.Value == 0 then
				playerBountyGui.Name = "D"
			else
				playerBountyGui.Name = "B"
			end

			playerBountyGui.Parent = bountiesGui.List
			bountiesGui.List.CanvasSize = UDim2.new(0, 0, 0, #bountiesGui.List:GetChildren() * 90)
		end
	end
end

function interface:hideBounties()
	local bountiesGui = self.gui.Bounties
	if self.bountiesShown then
		self.bountiesShown = false
		self:unhighlightCursor()
		self:hideBackground()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.stance:updateWalkSpeed()

		local newhideinventorysound = g.sounds.HideInventory:Clone()
		newhideinventorysound.Parent = workspace
		newhideinventorysound:Play()

		newhideinventorysound.Ended:Connect(function()
			task.wait()
			newhideinventorysound:Remove()
		end)

		bountiesGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:toggleFactions()
	if self.factionsShown then
		self:hideFactions()
	else
		self:showFactions()
	end
end

function interface:toggleSettings()
	if self.settingsShown then
		self:hideSettings()
	else
		self:showSettings()
	end
end

function interface:showFactions()
	local factionsGui = self.gui.Factions
	if not self.factionsShown then
		g.stance:endStances()
		self.factionsShown = true
		factionsGui:TweenSizeAndPosition(
			UDim2.new(0, 600, 0, 500),
			UDim2.new(0.5, -300, 0.5, -250),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:showBackground()
		self:hideToolbar()
		g.stance:updateWalkSpeed()

		if not workspace:FindFirstChild("ShowInventory") then
			local newshowinventorysound = g.sounds.ShowInventory:Clone()
			newshowinventorysound.Parent = workspace
			newshowinventorysound:Play()

			newshowinventorysound.Ended:Connect(function()
				task.wait()
				newshowinventorysound:Remove()
			end)
		end

		factionsGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				factionsGui.Close,
				"ImageColor3",
				Color3.fromRGB(80, 76, 64),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		factionsGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				factionsGui.Close,
				"ImageColor3",
				Color3.fromRGB(101, 96, 81),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		factionsGui.Close.Activated:Connect(function()
			self:hideFactions()
			self:unhighlightCursor()
		end)

		for i, v in pairs(factionsGui.List:GetChildren()) do
			if v:IsA("Frame") then
				v:Destroy()
			end
		end

		for i, v in pairs(g.storage.Factions:GetChildren()) do
			local memberCount = 0
			for j, k in pairs(g.playersService:GetPlayers()) do
				if k:FindFirstChild("Status") and k.Status.Faction.Value == tonumber(v.Name) then
					memberCount = memberCount + 1
				end
			end
			if memberCount > 0 then
				local factionGui = g.guis.FactionFrame:Clone()
				factionGui.Name = v.Name
				factionGui.Display.ImageColor3 = v.AcronymbgColor.Value
				factionGui.Display.Shadow.ImageColor3 = v.AcronymColor.Value
				factionGui.Display.ImageColor3 = v.AcronymColor.Value
				factionGui.Title.Text = "[" .. v.Acronym.Value .. "] " .. v.FName.Value
				factionGui.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
				factionGui.Description.Text = v.Description.Value
				factionGui.Emblem.Image = v.Emblem.Value
				factionGui.Owner.Text = "Owned by " .. v.Owner.Value
				factionGui.MemberCount.Text = memberCount .. " member(s) in this server"
				factionGui.Parent = factionsGui.List
			end
		end
		task.wait(0.1)
		factionsGui.List.CanvasSize = UDim2.new(0, 0, 0, factionsGui.List.UIListLayout.AbsoluteContentSize.Y + 10)
	end
end

function interface:hideFactions()
	local factionsGui = self.gui.Factions
	if self.factionsShown then
		self.factionsShown = false
		self:unhighlightCursor()
		self:hideBackground()

		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end

		g.stance:updateWalkSpeed()
		factionsGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)

		if not workspace:FindFirstChild("HideInventory") then
			local newhideinventorysound = g.sounds.HideInventory:Clone()
			newhideinventorysound.Parent = workspace
			newhideinventorysound:Play()

			newhideinventorysound.Ended:Connect(function()
				task.wait()
				newhideinventorysound:Remove()
			end)
		end
	end
end

function interface:toggleTitles()
	if self.titlesShown == true then
		self:hideTitles()
	else
		self:showTitles()
	end
end

function interface:showTitles()
	local titlesGui = self.gui.Titles
	if self.titlesShown == false then
		g.stance:endStances()

		self.titlesShown = true

		titlesGui:TweenSizeAndPosition(
			UDim2.new(0, 400, 0, 300),
			UDim2.new(0.5, -200, 0.5, -150),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:showBackground()
		self:hideToolbar()
		g.stance:updateWalkSpeed()
		g.sounds.ShowInventory:Play()

		titlesGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				titlesGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				titlesGui.Close.Title,
				"TextColor3",
				Color3.fromRGB(0, 0, 0),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		titlesGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				titlesGui.Close,
				"ImageColor3",
				Color3.fromRGB(180, 170, 140),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				titlesGui.Close.Title,
				"TextColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		titlesGui.Close.Activated:Connect(function()
			self:hideTitles()
			self:unhighlightCursor()
		end)

		for i, v in pairs(titlesGui.List:GetChildren()) do
			if v:IsA("ImageButton") then
				v:Destroy()
			end
		end

		self:setupTitles()
		wait(0.1)
		titlesGui.List.CanvasSize = UDim2.new(0, 0, 0, titlesGui.List.UIListLayout.AbsoluteContentSize.Y + 60)
	end
end

function interface:hideTitles()
	local titlesGui = self.gui.Titles
	if self.titlesShown == true then
		self.titlesShown = false
		self:unhighlightCursor()
		self:hideBackground()

		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end

		g.stance:updateWalkSpeed()
		g.sounds.HideInventory:Play()
		titlesGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:setupTitles()
	local titlesGui = self.gui.Titles
	for i, v in pairs(titlesGui.List:GetChildren()) do
		if v:IsA("ImageButton") then
			v:Destroy()
		end
	end

	for i, v in pairs(g.player.Status.TitlesFolder:GetChildren()) do
		self:addTitle(v)
	end
	titlesGui.List.CanvasSize = UDim2.new(0, 0, 0, titlesGui.List.UIListLayout.AbsoluteContentSize.Y + 10)
end

function interface:addTitle(item)
	local titlesGui = self.gui.Titles
	local titleButton = g.guis.TitleButton:Clone()

	titleButton.Name = item.Name
	titleButton.Title.Text = item.Name

	titleButton.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(titleButton, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(titleButton.Title, "TextColor3", Color3.fromRGB(0, 0, 0), 0.1, g.tween.Ease.In.Linear)
	end)

	titleButton.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(titleButton, "ImageColor3", Color3.fromRGB(180, 170, 140), 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(titleButton.Title, "TextColor3", Color3.fromRGB(255, 255, 255), 0.1, g.tween.Ease.In.Linear)
	end)

	titleButton.Activated:Connect(function()
		if g.player.Status.Title.Value == item.Name then
			g.misc.request("resetTitle")
		else
			self:updatePlayerTitle(item.Name)
		end

		self:unhighlightCursor()
	end)

	titleButton.Parent = titlesGui.List
end

function interface:updatePlayerTitle(item, reset)
	local title = item
	if reset then
		title = ""
	end
	g.misc.request("changeTitle", title)
end

function interface:toggleStream()
	if self.streamMode == true then
		self:hideStream()
	else
		self:showStream()
	end
end

function interface:showStream()
	self:hideBank()
	self:hideTradingPost()
	self:hideStorage()
	self:hideCabinet()
	self:hideIslands()
	self:hideBounties()
	self:hideStore()
	self:hideTravelling()
	self:hideNoticeBoard()
	self:hideCrafting()
	self:hideShop()
	self:hideInventory()

	self:hideTabs()
	self:hideChat()

	self:hideIntegrity()
	self:hideToolbar()
	
	self:hideCursor()
	self:hideMusic()

	self:newHint("Streaming mode enabled. P to disable.")
	self.streamMode = true
end

function interface:hideCursor()
	self.gui.Cursor.Visible = false
end
	
function interface:showCursor()
	self.gui.Cursor.Visible = true
end

function interface:hideStream()
	self:showTabs()
	self:showChat()
	
	self:showCursor()

	if g.player.Status.Tutorial.TutorialStarted.Value == false then
		self:showIntegrity()
		self:showToolbar()
		self:showTabs()
		self:showChat()
	end

	self:newHint("Streaming mode disabled.")
	self.streamMode = false
end

function interface:toggleStore()
	if self.storeShown then
		self:hideStore()
	else
		self:showStore()
	end
end

function interface:showStore()
	local storeGui = self.gui.Store
	if not self.storeShown then
		g.stance:endStances()
		self.storeShown = true

		storeGui:TweenSizeAndPosition(UDim2.new(0, 1000, 1, -200),UDim2.new(0.5, -500, 0, 100),"Out","Linear",0.2,true)
		self:showBackground()
		self:hideToolbar()
		self:showPounds()
		g.stance:updateWalkSpeed()

		storeGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(storeGui.Close, "ImageColor3", g.stats.colors.highlighted, 0.1, g.tween.Ease.In.Linear)
		end)

		storeGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				storeGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		storeGui.Close.Activated:Connect(function()
			self:hideStore()
			self:unhighlightCursor()
		end)

		if not workspace:FindFirstChild("ShowInventory") then
			local newshowinventorysound = g.sounds.ShowInventory:Clone()
			newshowinventorysound.Parent = workspace
			newshowinventorysound:Play()

			newshowinventorysound.Ended:Connect(function()
				task.wait()
				newshowinventorysound:Remove()
			end)
		end
	end
end

function interface:hideStore()
	local storeGui = self.gui.Store
	if self.storeShown then
		self.storeShown = false
		self:unhighlightCursor()
		self:hideBackground()
		self:hidePounds()

		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end

		g.stance:updateWalkSpeed()
		g.sounds.HideInventory:Play()
		storeGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Linear", 0.2, true)

		if not workspace:FindFirstChild("HideInventory") then
			local newhideinventorysound = g.sounds.HideInventory:Clone()
			newhideinventorysound.Parent = workspace
			newhideinventorysound:Play()

			newhideinventorysound.Ended:Connect(function()
				task.wait()
				newhideinventorysound:Remove()
			end)
		end
	end
end

-- Menu Stuff here 

--[[]]
function interface:ShowMenuChangelog()
	local menuGui = self.gui.Menu

	if self.menuChangelogsShown then
		self:HideMenuChangelog()
		return
	end

	if self.menuRulesShown then
		self:HideMenuRules()
	end

	if self.menuSettingsShown then
		self:HideMenuSettings()
	end

	if self.menuCreditsShown then
		self:HideMenuCredits()
	end

	if self.menuCommunityShown then
		self:HideMenuCommunity()
	end

	if not self.menuChangelogsShown then
		self.menuChangelogsShown = true
	end

	menuGui.TitleFrame.Heading.Text = g.stats.arbs.gameTitle
	menuGui.TitleFrame.HeadingShadow.Text = g.stats.arbs.gameTitle
	menuGui.ChangelogFrame.Version.Text = g.stats.versions.currentgameversion
	menuGui.ChangelogFrame.Stage.Text = g.stats.arbs.gameStage

	menuGui.ChangelogFrame:TweenSizeAndPosition(
		UDim2.new(0.30, 0, 550, 0),
		UDim2.new(1, -80, 0.253, 0),
		"Out",
		"Linear",
		0.2,
		true
	)
end

function interface:HideMenuChangelog()
	local menuGui = self.gui.Menu

	if self.menuChangelogsShown then
		self.menuChangelogsShown = false
	end

	menuGui.ChangelogFrame:TweenSizeAndPosition(
		UDim2.new(0, 0, 0, 0),
		UDim2.new(2.650, 0, 0.253, 0),
		"Out",
		"Linear",
		0.2,
		true
	)
end

function interface:ShowMenuCredits()
	local menuGui = self.gui.Menu

	if self.menuCreditsShown then
		self:HideMenuCredits()
		return
	end

	if self.menuChangelogsShown then
		self:HideMenuChangelog()
	end

	if self.menuRulesShown then
		self:HideMenuRules()
	end

	if self.menuSettingsShown then
		self:HideMenuSettings()
	end

	if self.menuCommunityShown then
		self:HideMenuCommunity()
	end

	if not self.menuCreditsShown then
		self.menuCreditsShown = true
	end

	menuGui.CreditsFrame:TweenSizeAndPosition(
		UDim2.new(0.30, 0, 550, 0),
		UDim2.new(1, -80, 0.253, 0),
		"Out",
		"Linear",
		0.2,
		true
	)
end

function interface:HideMenuCredits()
	local menuGui = self.gui.Menu

	if self.menuCreditsShown then
		self.menuCreditsShown = false
	end

	menuGui.CreditsFrame:TweenSizeAndPosition(
		UDim2.new(0, 0, 0, 0),
		UDim2.new(2.650, 0, 0.253, 0),
		"Out",
		"Linear",
		0.2,
		true
	)
end

function interface:ShowMenuRules()
	local menuGui = self.gui.Menu

	if self.menuRulesShown then
		self:HideMenuRules()
		return
	end

	if self.menuSettingsShown then
		self:HideMenuSettings()
	end

	if self.menuChangelogsShown then
		self:HideMenuChangelog()
	end

	if self.menuCreditsShown then
		self:HideMenuCredits()
	end

	if self.menuCommunityShown then
		self:HideMenuCommunity()
	end

	if not self.menuRulesShown then
		self.menuRulesShown = true
	end

	menuGui.RulesFrame:TweenSizeAndPosition(
		UDim2.new(0.30, 0, 550, 0),
		UDim2.new(1, -80, 0.253, 0),
		"Out",
		"Linear",
		0.2,
		true
	)
end

function interface:HideMenuRules()
	local menuGui = self.gui.Menu

	if self.menuRulesShown then
		self.menuRulesShown = false
	end

	menuGui.RulesFrame:TweenSizeAndPosition(
		UDim2.new(0, 0, 0, 0),
		UDim2.new(2.650, 0, 0.253, 0),
		"Out",
		"Linear",
		0.2,
		true
	)
end

function interface:ShowMenuSettings()
	local menuGui = self.gui.Menu

	if self.menuSettingsShown then
		self:HideMenuSettings()
		return
	end

	if self.menuRulesShown then
		self:HideMenuRules()
	end

	if self.menuChangelogsShown then
		self:HideMenuChangelog()
	end

	if self.menuCreditsShown then
		self:HideMenuCredits()
	end

	if self.menuCommunityShown then
		self:HideMenuCommunity()
	end

	if not self.menuSettingsShown then
		self.menuSettingsShown = true
	end

	menuGui.SettingsFrame:TweenSizeAndPosition(UDim2.new(0.30, 0, 550, 0),UDim2.new(1, -80, 0.253, 0),"Out","Linear",0.2,true)
end

function interface:HideMenuSettings()
	local menuGui = self.gui.Menu

	if self.menuSettingsShown then
		self.menuSettingsShown = false
	end

	menuGui.SettingsFrame:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0),UDim2.new(2.650, 0, 0.253, 0),"Out","Linear",0.2,true)
end

function interface:ShowMenuCommunity()
	local menuGui = self.gui.Menu

	if self.menuCommunityShown then
		self:HideMenuCommunity()
		return
	end

	if self.menuRulesShown then
		self:HideMenuRules()
	end

	if self.menuChangelogsShown then
		self:HideMenuChangelog()
	end

	if self.menuCreditsShown then
		self:HideMenuCredits()
	end

	if not self.menuCommunityShown then
		self.menuCommunityShown = true
	end

	menuGui.CommunityFrame:TweenSizeAndPosition(UDim2.new(0.30, 0, 550, 0),UDim2.new(1, -80, 0.253, 0),"Out","Linear",0.2,true)
end

function interface:HideMenuCommunity()
	local menuGui = self.gui.Menu

	if self.menuCommunityShown then
		self.menuCommunityShown = false
	end

	menuGui.CommunityFrame:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0),UDim2.new(2.650, 0, 0.253, 0),"Out","Linear",0.2,true)
end
-- Test here
function interface:ShowMenuPlay()
	local menuGui = self.gui.Menu

	if self.menuPlayingShown == true then
		return
	end

	if not self.menuPlayingShown then
		self.menuPlayingShown = true
	end

	if self.menuRulesShown then
		self:HideMenuRules()
	end

	if self.menuSettingsShown then
		self:HideMenuSettings()
	end

	if self.menuChangelogsShown then
		self:HideMenuChangelog()
	end

	if self.menuCreditsShown then
		self:HideMenuCredits()
	end

	if self.menuCommunityShown then
		self:HideMenuCommunity()
	end

	if not self.menuRulesShown then
		self.menuRulesShown = true
	end

	menuGui.Buttons:TweenSizeAndPosition(UDim2.new(0, 890, 0, 540),UDim2.new(0, -750, 0.150, 0),"Out","Linear",0.350,true)

	local selectedRole = false

	for i, v in pairs(g.role.availableRoles) do
		local tweenInfo = TweenInfo.new(0.5)
		local roleGui = g.guis.MenuRole:Clone()
		roleGui.Name = v.name
		roleGui.Parent = menuGui.Roles
		if v.name == "HBC" then
			roleGui.Title.Text = "HBC"
		elseif v.name == "Colonist" then
			roleGui.Title.Text = "Colonist"
		elseif v.name == "Native" then
			roleGui.Title.Text = "Native"
		elseif v.name == "NWC" then
			roleGui.Title.Text = "TCT"
		else
			roleGui.Title.Text = v.name
		end

		roleGui.Hardcore.Visible = v.hardcore
		roleGui.Description.Text = v.description
		local model = g.objects.MenuModels[v.name]:Clone()
		model.Parent = g.mouseFilter
		model.Name = ""
		local idleAnimation = model.Humanoid:LoadAnimation(model.Animations.Idle)
		local actionAnimation = model.Humanoid:LoadAnimation(model.Animations.Action)
		model:WaitForChild("HumanoidRootPart")
		model:WaitForChild("Humanoid")
		idleAnimation:Play()

		local MenuModelRenderer

		MenuModelRenderer = g.runService:BindToRenderStep("MenuModel_" .. v.name,Enum.RenderPriority.Last.Value,function()
			if selectedRole == true then
				model:Destroy()
				g.runService:UnbindFromRenderStep("MenuModel_" .. v.name)
				MenuModelRenderer = nil
			end

			if selectedRole == false then
				local ray = g.camera:ScreenPointToRay(
					roleGui.AbsolutePosition.X + (roleGui.AbsoluteSize.X / 2),
					roleGui.AbsolutePosition.Y + (roleGui.AbsoluteSize.Y / 2) - 50,
					17 - ((1 - model.HumanoidRootPart.Transparency) * 7)
				)
				model.HumanoidRootPart.CFrame = CFrame.new(ray.Origin, ray.Origin + ray.Direction)
					* CFrame.Angles(0, math.rad(180), 0)
				model.HumanoidRootPart.Ambient.Brightness = math.max(1, (1 - g.lighting.Brightness) * 7)
			end
		end)

		model.Parent = g.mouseFilter

		roleGui.MouseEnter:Connect(function()
			if not self.transitionShown then
				self:highlightCursor()
				g.sounds.Click:Play()
				actionAnimation:Play(0.5)
				g.tweenService:Create(model.HumanoidRootPart,tweenInfo,{ Transparency = 0.5, Color = g.stats.colors.highlighted }):Play()
				g.tweenService:Create(model.HumanoidRootPart.Mesh,tweenInfo,{ Scale = Vector3.new(4, 0.001, 4), Offset = Vector3.new(0, -3.3, 0) }):Play()
				g.tweenService:Create(model.HumanoidRootPart.Ambient,tweenInfo,{ Color = g.stats.colors.highlighted, Range = 9 }):Play()
				g.tweenService:Create(roleGui.Title,tweenInfo,{ TextColor3 = g.stats.colors.highlighted, TextStrokeColor3 = Color3.new(1, 1, 1) }):Play()
				g.tweenService:Create(roleGui.Description, tweenInfo, { TextTransparency = 0 }):Play()
				g.tweenService:Create(roleGui.Background, tweenInfo, { ImageTransparency = 0 }):Play()
				roleGui.Title:TweenPosition(UDim2.new(0, 0, 1, -70), "Out", "Quad", 0.5, true)
				roleGui.Hardcore:TweenPosition(UDim2.new(0, 0, 1, -100), "Out", "Quad", 0.5, true)
				roleGui.Description:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.5, true)
			end
		end)

		roleGui.MouseLeave:Connect(function()
			if not self.transitionShown and model:FindFirstChild("HumanoidRootPart") then
				self:unhighlightCursor()
				actionAnimation:Stop(0.5)
				g.tweenService:Create(model:FindFirstChild("HumanoidRootPart"),tweenInfo,{ Transparency = 1, Color = Color3.new(1, 1, 1) }):Play()
				g.tweenService:Create(model.HumanoidRootPart.Mesh,tweenInfo,{ Scale = Vector3.new(0, 0.001, 0), Offset = Vector3.new(0, -7, 0) }):Play()
				g.tweenService:Create(model.HumanoidRootPart.Ambient, tweenInfo, { Color = Color3.new(1, 1, 1), Range = 7 }):Play()
				g.tweenService:Create(roleGui.Title,tweenInfo,{ TextColor3 = Color3.new(1, 1, 1), TextStrokeColor3 = Color3.new(0, 0, 0) }):Play()
				g.tweenService:Create(roleGui.Description, tweenInfo, { TextTransparency = 1 }):Play()
				g.tweenService:Create(roleGui.Background, tweenInfo, { ImageTransparency = 1 }):Play()
				roleGui.Title:TweenPosition(UDim2.new(0, 0, 1, -50), "Out", "Quad", 0.5, true)
				roleGui.Hardcore:TweenPosition(UDim2.new(0, 0, 1, -80), "Out", "Quad", 0.5, true)
				roleGui.Description:TweenPosition(UDim2.new(0, 0, 0, 20), "Out", "Quad", 0.5, true)
			end
		end)

		roleGui.Activated:Connect(function()
			if not selectedRole then
				self:unhighlightCursor()
				if not self.transitionShown then
					local neweaglesound = g.sounds.Eagle:Clone()
					neweaglesound.Parent = workspace
					neweaglesound:Play()

					neweaglesound.Ended:Connect(function()
						task.wait()
						neweaglesound:Remove()
					end)
				end

				self:showTransition()
				if g.role:assignRole(v.name,false) then
					self:hideMenu()
					task.wait(3)
					g.stance:respawn(true)
					self.gui.Chat.Visible = true
					self.gui.Shading.Visible = false
					task.wait(0.550)
					selectedRole = true
					self:hideTransition()
					self:showGame()
				else
					self:hideTransition()
				end
			end
		end)
	end
end

function interface:showMusic()
	
	local musicGui = self.gui.Music
	musicGui.Visible = true
	
	musicGui.Position = UDim2.fromScale(-1, .75)
	
	game:GetService("TweenService"):Create(musicGui, TweenInfo.new(.5), {
		Position = UDim2.fromScale(.4, .75)
	}):Play()
end

function interface:hideMusic()

	local musicGui = self.gui.Music
	
	musicGui.Visible = false
end

function interface:updateMusic(musicObject)

	local musicGui = self.gui.Music

	musicGui.PlayingLabel.Text = "CURRENT SONG: " .. musicObject:FindFirstChild("SongName").Value
end

function interface:showMenu()
	local menuGui = self.gui.Menu

	self:ShowMenuPlay()

	if not self.menuShown then
		self.menuShown = true
	end

	self.gui.Chat.Visible = false

	g.camera.CameraType = Enum.CameraType.Scriptable
	g.camera.CFrame = g.stats.places[game.PlaceId].menuCameraCFrame

	local imagestocache = {
		"rbxassetid://729268889",
		"rbxassetid://749398631",
		"rbxassetid://16597097476",
		"rbxassetid://715225531",
	}

	for i, v in pairs(menuGui.Buttons:GetChildren()) do
		if v.Name~="UIListLayout" and v.Name~="UIPadding" and v.Name~="ServerLocation" and v.Name~="DividerFrame"  then
			if v.Name == "Play" then
				local MenuTabFunction = self["ShowMenu" .. v.Name]
				MenuTabFunction(self)
			end
			v.Changelog.Activated:Connect(function()
				if self["ShowMenu" .. v.Name] then
					local MenuTabFunction = self["ShowMenu" .. v.Name]
					print("ShowMenu" .. v.Name)
					MenuTabFunction(self)
				else
					print("MenuTab with name of " .. v.Name .. " doesnt exist")
				end
			end)

			v.Changelog.MouseEnter:Connect(function()
				g.tween:TweenColor3(v.Changelog,"BackgroundColor3",g.stats.colors.highlighted,0.1,g.tween.Ease.In.Linear)
			end)

			v.Changelog.MouseLeave:Connect(function()
				self:unhighlightCursor()
				g.tween:TweenColor3(v.Changelog,"BackgroundColor3",Color3.fromRGB(215, 200, 170),0.1,g.tween.Ease.In.Linear)
			end)
		end
	end



	for i, v in pairs(g.stats.versions.changelog) do
		local NewChangelogGui = g.guis.MenuChangeLog:Clone()
		NewChangelogGui.Name = i
		NewChangelogGui.Text = "- " .. i
		NewChangelogGui.TextColor3 = v.TextColor
		NewChangelogGui.Parent = menuGui.ChangelogFrame.Changelogs
	end

	for i, v in pairs(g.stats.contributioncredits.contributors) do
		local NewContributorGui = g.guis.MenuContributor:Clone()
		NewContributorGui.Name = i
		NewContributorGui.Text = "- " .. i .. " -  " .. v.Contribution
		NewContributorGui.TextColor3 = v.TextColor
		NewContributorGui.Parent = menuGui.CreditsFrame.Credits
	end

	for i, v in pairs(g.stats.gamerules.rules) do
		local NewRuleGui = g.guis.MenuRules:Clone()
		NewRuleGui.Name = i
		NewRuleGui.Text = "- " .. i
		NewRuleGui.TextColor3 = v.TextColor
		NewRuleGui.Parent = menuGui.RulesFrame.Rules
	end

	local Success, ReturnedData

	Success, ReturnedData = pcall(function()
		g.contentProvider:PreloadAsync(imagestocache)
	end)

	if not Success then
		print("An error occurred while attempting to cache images")
	end

	self:showCursor()


	g.sounds.MenuMusic:Play()
	g.sounds.GlobalAmbient:Play()
	g.tween:TweenNumber(g.sounds.GlobalAmbient, "Volume", 0.3, 3, g.tween.Ease.In.Linear)
end

function interface:hideMenu()
	local menuGui = self.gui.Menu
	print("PLAYED")
	if self.menuShown then
		self.menuShown = false
		menuGui:TweenPosition(UDim2.new(1, 0, 0, 0), "Out", "Linear", 0.5, true)
		g.tween:TweenNumber(g.sounds.MenuMusic, "Volume", 0, 3, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(g.sounds.GlobalAmbient, "Volume", 0.3, 3, g.tween.Ease.In.Linear)
		local ambienceIsMusic = false
		for i, v in pairs(g.loadedZones) do
			if v.stats.ambienceIsMusic then
				g.tweenService:Create(v.ambience, TweenInfo.new(3), { Volume = 0.4 }):Play()
				ambienceIsMusic = true
				break
			end
		end
	end
end


-- Menu ends here 
function interface:showTransition()
	local transitionGui = self.gui.Transition
	if not self.transitionShown then
		self.transitionShown = true
		self:showBackground()
		transitionGui.Size = UDim2.new(0, 0, 1, 50)
		transitionGui.Position = UDim2.new(0, 0, 0, -50)
		transitionGui:TweenSizeAndPosition(UDim2.new(1, 0, 1, 50), UDim2.new(0, 0, 0, -50), "Out", "Linear", 0.5, true)
		g.tween:TweenNumber(transitionGui, "BackgroundTransparency", 0, 0.5, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(transitionGui.Title, "TextTransparency", 0.5, 0.5, g.tween.Ease.In.Linear)
		spawn(function()
			while task.wait(0.5) do
				if self.transitionShown == false then
					break
				end

				g.tween:TweenNumber(transitionGui.Title, "TextTransparency", 0.1, 0.5, g.tween.Ease.In.Linear)
				task.wait(0.5)
				if self.transitionShown then
					g.tween:TweenNumber(transitionGui.Title, "TextTransparency", 0.5, 0.5, g.tween.Ease.In.Linear)
				end
			end
		end)
		task.wait(0.5)
	end
end

function interface:hideTransition()
	local transitionGui = self.gui.Transition
	if self.transitionShown then
		self.transitionShown = false
		self:hideBackground()
		transitionGui.Size = UDim2.new(1, 0, 1, 50)
		transitionGui.Position = UDim2.new(0, 0, 0, -50)
		transitionGui:TweenSizeAndPosition(UDim2.new(0, 0, 1, 50), UDim2.new(1, 0, 0, -50), "Out", "Linear", 0.5, true)
		g.tween:TweenNumber(transitionGui, "BackgroundTransparency", 1, 0.5, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(transitionGui.Title, "TextTransparency", 1, 0.5, g.tween.Ease.In.Linear)
		task.wait(0.5)
	end
end

function interface:updateCursor()
	local cursorGui = self.gui.Cursor
	g.tween:TweenColor3(cursorGui.Icon, "ImageColor3", g.stats.colors.cursorcolor, 0.1, g.tween.Ease.In.Linear)
	g.tween:TweenColor3(cursorGui.Aiming, "ImageColor3", g.stats.colors.cursorcolor, 0.1, g.tween.Ease.In.Linear)
end

function interface:ChangeCursorColor(cursorcolorrgb)
	g.stats.colors.cursorcolor = cursorcolorrgb
	self:updateCursor()
end

function interface:showCursor()
	local cursorGui = self.gui.Cursor
	if not self.cursorShown then
		self.cursorShown = true
		cursorGui.Icon:TweenSizeAndPosition(UDim2.new(0, 10, 0, 10), UDim2.new(0, 0, 0, 0), "Out", "Linear", 0.2, true)
		g.tween:TweenColor3(cursorGui.Icon, "ImageColor3", g.stats.colors.cursorcolor, 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(cursorGui.Aiming, "ImageColor3", g.stats.colors.cursorcolor, 0.1, g.tween.Ease.In.Linear)
	end
end

function interface:hideCursor()
	local cursorGui = self.gui.Cursor
	if self.cursorShown then
		self.cursorShown = false
		cursorGui.Icon:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:changeCursor(mode)
	local cursorGui = self.gui.Cursor
	if self.cursorShown then
		if mode == "normal" then
			cursorGui.Aiming.Visible = false
			cursorGui.Icon.Visible = true
			cursorGui.Aiming:TweenSizeAndPosition(
				UDim2.new(0, 5, 0, 5),
				UDim2.new(0, -5, -5, 0),
				"Out",
				"Linear",
				0.2,
				true
			)
		elseif mode == "aiming" then
			cursorGui.Aiming.Visible = false
			cursorGui.Icon.Visible = true
		end
	end
end

local BS = game:GetService("BadgeService")

function interface:showGame()
		self:addChatTab("Local")
		self:showChat()
		self:showDefaultChatTab()
		self:showDefaultControls()
		self:showTabs()
		self:setupStore()
		self:setupSettings()
		self:showToolbar()
		self:showIntegrity()
		self.gui.ResetPosition.Visible = false
		self.loadingGame = false
		warn("INSIDE SHOWGAME")
		spawn(function()
			task.wait(2)
			local CurrentDailyRewardClaimTime = os.time()

			if g.misc.isOsTimeBeforeOsTime(g.player, CurrentDailyRewardClaimTime, g.player.Status.LastDailyReward.Value) then
				local currentplacedata = g.stats.places[game.PlaceId]
				if currentplacedata.isIsland == false then 
					self:showMessage("Dailyreward","Daily reward","Thanks for coming back " .. g.player.Name .. ", here's a little reward!","CLAIM REWARD")
				end
			end

		if not BS:UserHasBadgeAsync(g.player.UserId, 3771495869318682) then 
				warn("SHOWING TUTORIAL")
				self:showTutorial()
				g.misc.request("awardTutorialBadge", g.player)
			else
				warn("HAS BADGE")
			end
	end)
end

function interface:GetStoreCategoryByName(CategoryName)
	local TotalCategoryProducts = {}

	if not g.stats.StoreProducts[CategoryName] then
		return nil
	end

	if g.stats.StoreProducts[CategoryName] then
		local CategoryProducts = g.stats.StoreProducts[CategoryName]

		for index, product in pairs(CategoryProducts) do
			table.insert(TotalCategoryProducts, { id = index, productdata = product })
		end
	end
	return TotalCategoryProducts
end

function interface:deleteStoreItems(storeGui)
	for i, v in pairs(storeGui.backframe.ScrollingFrame:GetChildren()) do
		if v:IsA("ImageButton") and v.Name ~= "UIGridLayout" then
			v:Destroy()
		end
	end
end

function interface:primaryfactionstate()
	local primaryGroup = g.misc.getPlayerPrimaryGroup(g.player)

	if primaryGroup and primaryGroup.Rank == 255 then
		return "Create faction for " .. primaryGroup.Name
	else
		return "Waiting for a owned primary group..."
	end
end

function interface:setupSettings()

end

function interface:setupStore()
	local storeGui = self.gui.Store

	for j, k in pairs(storeGui.Categories:GetChildren()) do
		if k:IsA("Frame") then
			storeGui.Categories.CanvasSize =
				UDim2.new(0, 0, 0, storeGui.Categories.CanvasSize.Y.Offset + 10 + k.AbsoluteSize.Y)
			for i, v in pairs(k:GetChildren()) do
				if v:IsA("ImageLabel") then
					task.spawn(function()
						local tweenInfo = TweenInfo.new(0.2)

						local success, productInfo = pcall(function()
							return g.marketplaceService:GetProductInfo(v.ProductId.Value, Enum.InfoType.Product)
						end)

						local tries = 0
						while not success and tries < 3 do
							task.wait(0.1)
							success, productInfo = pcall(function()
								return g.marketplaceService:GetProductInfo(v.ProductId.Value, Enum.InfoType.Product)
							end)

							tries += 1
						end

						if not success then
							return
						end

						v.Title.Text = string.upper(productInfo.Name)
						v.Price.Text = productInfo.PriceInRobux .. " ROBUX"
						v.Icon.Image = g.stats.arbs.assetLink .. productInfo.IconImageAssetId
						if v:FindFirstChild("Description") then
							pcall(function()
								v.Description.Text = productInfo.Description
							end)
						end

						v.MouseEnter:Connect(function()
							g.tweenService:Create(v, tweenInfo, { ImageTransparency = 0 }):Play()
							g.tweenService:Create(v.Icon, tweenInfo, { ImageTransparency = 0 }):Play()
							v.Purchase:TweenPosition(UDim2.new(0, 10, 1, -50), "Out", "Linear", 0.1, true)
							if v.Purchase.Visible and v:FindFirstChild("Description") then
								g.tweenService:Create(v.Description, tweenInfo, { TextTransparency = 1 }):Play()
							end
						end)

						v.MouseLeave:Connect(function()
							g.tweenService:Create(v, tweenInfo, { ImageTransparency = 0.3 }):Play()
							g.tweenService:Create(v.Icon, tweenInfo, { ImageTransparency = 0.3 }):Play()
							v.Purchase:TweenPosition(UDim2.new(0, 10, 1, 0), "Out", "Linear", 0.1, true)
							if v:FindFirstChild("Description") then
								g.tweenService:Create(v.Description, tweenInfo, { TextTransparency = 0 }):Play()
							end
						end)

						v.Purchase.MouseEnter:Connect(function()
							self:highlightCursor()
							g.tween:TweenColor3(
								v.Purchase,
								"ImageColor3",
								g.stats.colors.highlighted,
								0.1,
								g.tween.Ease.In.Linear
							)
							g.tween:TweenColor3(
								v.Purchase.Title,
								"TextColor3",
								Color3.fromRGB(255, 255, 255),
								0.1,
								g.tween.Ease.In.Linear
							)
						end)

						v.Purchase.MouseLeave:Connect(function()
							self:unhighlightCursor()
							g.tween:TweenColor3(
								v.Purchase,
								"ImageColor3",
								Color3.fromRGB(180, 170, 140),
								0.1,
								g.tween.Ease.In.Linear
							)
							g.tween:TweenColor3(
								v.Purchase.Title,
								"TextColor3",
								Color3.fromRGB(255, 255, 255),
								0.1,
								g.tween.Ease.In.Linear
							)
						end)

						v.Purchase.Activated:Connect(function()
							g.marketplaceService:PromptProductPurchase(g.player, v.ProductId.Value)
						end)
					end)
				end
			end
		end
	end

	spawn(function()
		while task.wait(5) do
			if self.storeShown then
				local primaryGroup = g.misc.getPlayerPrimaryGroup()
				if primaryGroup and primaryGroup.Rank == 255 then
					storeGui.Categories.G_Other__.A.Title.Text = "For " .. primaryGroup.Name
					storeGui.Categories.G_Other__.A.Title.TextColor3 = Color3.new(255, 255, 255)
					storeGui.Categories.G_Other__.A.Title.TextSize = 22
					storeGui.Categories.G_Other__.A.Title.Visible = true
				else
					storeGui.Categories.G_Other__.A.Title.Text = "Waiting for a owned primary group..."
					storeGui.Categories.G_Other__.A.Title.TextColor3 = Color3.fromRGB(180, 60, 60)
					storeGui.Categories.G_Other__.A.Title.TextSize = 18
					storeGui.Categories.G_Other__.A.Purchase.Visible = false
				end
				if primaryGroup and primaryGroup.Rank == 255 and g.player.Status.Faction.Value == primaryGroup.Id then
					storeGui.Categories.G_Other__.B.Title.Text = "For " .. primaryGroup.Name
					storeGui.Categories.G_Other__.B.Title.TextColor3 = Color3.new(255, 255, 255)
					storeGui.Categories.G_Other__.B.Title.TextSize = 22
					storeGui.Categories.G_Other__.B.Purchase.Visible = true
				else
					storeGui.Categories.G_Other__.B.Title.Text = "Waiting for a owned faction..."
					storeGui.Categories.G_Other__.B.Title.TextColor3 = Color3.fromRGB(180, 60, 60)
					storeGui.Categories.G_Other__.B.Title.TextSize = 18
					storeGui.Categories.G_Other__.B.Purchase.Visible = false
				end
			end
		end
	end)
end

function interface:showTravelling()
	local travellingGui = self.gui.Travelling
	if not self.travelShown then
		g.stance:endStances()
		self.travelShown = true
		travellingGui:TweenSizeAndPosition(
			UDim2.new(0, 400, 0, 400),
			UDim2.new(0.5, -200, 0.5, -200),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:showBackground()
		self:hideToolbar()

		local newshowinventorysound = g.sounds.ShowInventory:Clone()
		newshowinventorysound.Parent = workspace
		newshowinventorysound:Play()

		newshowinventorysound.Ended:Connect(function()
			task.wait()
			newshowinventorysound:Remove()
		end)

		travellingGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				travellingGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				travellingGui.Close.Title,
				"TextColor3",
				Color3.fromRGB(0, 0, 0),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		travellingGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				travellingGui.Close,
				"ImageColor3",
				Color3.fromRGB(180, 170, 140),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				travellingGui.Close.Title,
				"TextColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		travellingGui.Close.Activated:Connect(function()
			self:hideTravelling()
		end)

		for i, v in pairs(g.mouseFilter.TravelPoints:GetChildren()) do
			local travelPointGui = g.guis.TravelPoint:Clone()
			travelPointGui.Title.Text = "Travel to " .. v.Name
			travelPointGui.Parent = travellingGui.List

			travelPointGui.MouseEnter:Connect(function()
				self:highlightCursor()
				g.tween:TweenColor3(
					travelPointGui,
					"ImageColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
				g.tween:TweenColor3(
					travelPointGui.Title,
					"TextColor3",
					Color3.fromRGB(0, 0, 0),
					0.1,
					g.tween.Ease.In.Linear
				)
			end)

			travelPointGui.MouseLeave:Connect(function()
				self:unhighlightCursor()
				g.tween:TweenColor3(
					travelPointGui,
					"ImageColor3",
					Color3.fromRGB(180, 170, 140),
					0.1,
					g.tween.Ease.In.Linear
				)
				g.tween:TweenColor3(
					travelPointGui.Title,
					"TextColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
			end)

			travelPointGui.Activated:Connect(function()
				self:hideTravelling()
				self:showTransition()
				task.wait(1)
				g.misc.request("travelPlayer", v.Name)
				task.wait(1)
				self:hideTransition()
			end)
		end
	end
end

function interface:hideTravelling()
	local travellingGui = self.gui.Travelling
	if self.travelShown then
		self.travelShown = false
		travellingGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, -0, 2, 0), "Out", "Linear", 0.2, true)
		self:hideBackground()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.sounds.HideInventory:Play()
		self:unhighlightCursor()

		for i, v in pairs(travellingGui.List:GetChildren()) do
			if v:IsA("ImageButton") then
				v:Destroy()
			end
		end
	end
end

function interface:showNoticeBoard()
	local noticeBoardGui = self.gui.NoticeBoard
	if not self.noticeBoardShown then
		g.stance:endStances()
		self.noticeBoardShown = true
		noticeBoardGui:TweenSizeAndPosition(
			UDim2.new(0, 500, 0, 500),
			UDim2.new(0.5, -250, 0.5, -250),
			"Out",
			"Linear",
			0.2,
			true
		)
		self:showBackground()
		self:hideToolbar()

		local newshowinventorysound = g.sounds.ShowInventory:Clone()
		newshowinventorysound.Parent = workspace
		newshowinventorysound:Play()

		newshowinventorysound.Ended:Connect(function()
			task.wait()
			newshowinventorysound:Remove()
		end)

		noticeBoardGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				noticeBoardGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				noticeBoardGui.Close.Title,
				"TextColor3",
				Color3.fromRGB(0, 0, 0),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		noticeBoardGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				noticeBoardGui.Close,
				"ImageColor3",
				Color3.fromRGB(180, 170, 140),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				noticeBoardGui.Close.Title,
				"TextColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		noticeBoardGui.Close.Activated:Connect(function()
			self:hideNoticeBoard()
		end)
		--[[
        if g.player:GetRankInGroup(10825582) >= 17 then
			noticeBoardGui.List.NewNotice.Visible = true

			noticeBoardGui.List.NewNotice.Publish.MouseEnter:Connect(function()
				self:highlightCursor()
				g.tween:TweenColor3(noticeBoardGui.List.NewNotice.Publish, "ImageColor3", Color3.fromRGB(255, 255, 255), .1, g.tween.Ease.In.Linear)
				g.tween:TweenColor3(noticeBoardGui.List.NewNotice.Publish.Title, "TextColor3", Color3.fromRGB(0, 0, 0), .1, g.tween.Ease.In.Linear)
			end)

			noticeBoardGui.List.NewNotice.Publish.MouseLeave:Connect(function()
				self:unhighlightCursor()
				g.tween:TweenColor3(noticeBoardGui.List.NewNotice.Publish, "ImageColor3", Color3.fromRGB(180, 170, 140), .1, g.tween.Ease.In.Linear)
				g.tween:TweenColor3(noticeBoardGui.List.NewNotice.Publish.Title, "TextColor3", Color3.fromRGB(255, 255, 255), .1, g.tween.Ease.In.Linear)
			end)

			noticeBoardGui.List.NewNotice.Publish.Activated:Connect(function()
				noticeBoardGui.List.NewNotice.Publish.Visible = false
				local noticeText = noticeBoardGui.List.NewNotice.Content.Text
				noticeBoardGui.List.NewNotice.Content.Text = ""
				g.misc.request("economy", "addNotice", noticeText)
				noticeBoardGui.List.NewNotice.Publish.Visible = true
			end)
		end
		local notices = g.misc.request("economy", "getNotices")
		for i, v in pairs(notices) do
			local noticeArticleGui = g.guis.NoticeArticle:Clone()
			noticeArticleGui.Name = i
			noticeArticleGui.Content.Text = v
			noticeArticleGui.Parent = noticeBoardGui.List
		end
]]
		--
	end
end

function interface:hideNoticeBoard()
	local noticeBoardGui = self.gui.NoticeBoard
	if self.noticeBoardShown then
		self.noticeBoardShown = false
		noticeBoardGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, -0, 2, 0), "Out", "Linear", 0.2, true)
		self:hideBackground()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end

		local newhideinventorysound = g.sounds.HideInventory:Clone()
		newhideinventorysound.Parent = workspace
		newhideinventorysound:Play()

		newhideinventorysound.Ended:Connect(function()
			task.wait()
			newhideinventorysound:Remove()
		end)

		self:unhighlightCursor()

		for i, v in pairs(noticeBoardGui.List:GetChildren()) do
			if tonumber(v.Name) then
				v:Destroy()
			end
		end
	end
end

function interface:UpdateNotificationIndicator(NewNotificationText)
	if self.notificationIndicatorShown == true then
		local notificationIndicatorGui = self.gui.NotificationIndicator
		notificationIndicatorGui.Content.Text = NewNotificationText
	end
end

function interface:showNotificationIndicator(NotificationData)
	local notificationIndicatorGui = self.gui.NotificationIndicator

	if self.notificationIndicatorShown then
		g.interface:hideNotificationIndicator()
		task.wait(1)
	end

	if not self.notificationIndicatorShown then
		self.notificationIndicatorShown = true

		spawn(function()
			g.tween:TweenNumber(notificationIndicatorGui, "ImageTransparency", 0, 1, g.tween.Ease.In.Linear)
			notificationIndicatorGui.Content.TextTransparency = 0
			notificationIndicatorGui.Outline.BackgroundTransparency = 0

			--// update colors and content of notification page
			notificationIndicatorGui.Outline.BackgroundColor3 = NotificationData.ImageColor
			notificationIndicatorGui.ImageColor3 = NotificationData.ImageColor
			notificationIndicatorGui.Content.TextColor3 = NotificationData.TextColor
			notificationIndicatorGui.Content.Text = NotificationData.Text

			while task.wait() do
				if self.notificationIndicatorShown == false then
					if self.notificationIndicatorShown == false then
						break
					end

					g.tween:TweenNumber(notificationIndicatorGui, "ImageTransparency", 1, 1, g.tween.Ease.In.Linear)
					notificationIndicatorGui.Content.TextTransparency = 1
					notificationIndicatorGui.Outline.BackgroundTransparency = 1
					break
				end
				if NotificationData.Highlight == true then
					g.tween:TweenNumber(notificationIndicatorGui, "ImageTransparency", 0.6, 1, g.tween.Ease.In.Linear)
					task.wait(1)
					g.tween:TweenNumber(notificationIndicatorGui, "ImageTransparency", 0, 1, g.tween.Ease.In.Linear)
				end
				task.wait(1)
			end
		end)
	end
end

function interface:hideNotificationIndicator()
	if self.notificationIndicatorShown then
		self.notificationIndicatorShown = false
	end
end

function interface:showQuestStatusIndicator()
	local PlayerQuestFolder = g.player.Status:FindFirstChild("Quests")
	local CurrentQuestValue = PlayerQuestFolder:FindFirstChild("currentQuest")
	local TakenQuestDuration = PlayerQuestFolder:FindFirstChild("currentQuestduration")

	local TakenQuestData = g.quests.getQuestDataById(g.player.Status.Role.Value, CurrentQuestValue.Value)

	if not self.questStatusIndicatorShown then
		self.questStatusIndicatorShown = true

		spawn(function()
			if TakenQuestDuration.Value > 0 then
				g.interface:showNotificationIndicator({
					["Text"] = TakenQuestData.Description.Title .. " - [" .. tostring(TakenQuestDuration.Value) .. "]",
					["ImageColor"] = Color3.fromRGB(0, 255, 0),
					["TextColor"] = Color3.fromRGB(0, 255, 0),
					["Highlight"] = false,
				})
			else
				g.interface:showNotificationIndicator({
					["Text"] = TakenQuestData.QuestData.Description,
					["ImageColor"] = Color3.fromRGB(0, 255, 0),
					["TextColor"] = Color3.fromRGB(0, 255, 0),
					["Highlight"] = false,
				})
			end

			while self.questStatusIndicatorShown do
				if self.questStatusIndicatorShown == false then
					break
				end

				if TakenQuestDuration.Value > 0 then
					g.interface:UpdateNotificationIndicator(
						TakenQuestData.QuestData.Title .. " - [" .. tostring(TakenQuestDuration.Value) .. "]"
					)
				end
				task.wait(1)
			end
			g.interface:hideQuestStatusIndicator()
		end)
	end
end

function interface:hideQuestStatusIndicator()
	if self.questStatusIndicatorShown then
		self.questStatusIndicatorShown = false
	end
end

function interface:showSafeIndicator()
	local safeIndicatorGui = self.gui.SafeIndicator
	if not self.safeIndicatorShown then
		self.safeIndicatorShown = true
		spawn(function()
			while self.safeIndicatorShown do
				g.tween:TweenNumber(safeIndicatorGui, "ImageTransparency", 0.6, 1, g.tween.Ease.In.Linear)
				task.wait(1)
				g.tween:TweenNumber(safeIndicatorGui, "ImageTransparency", 0.8, 1, g.tween.Ease.In.Linear)
				task.wait(1)
			end
			g.tween:TweenNumber(safeIndicatorGui, "ImageTransparency", 1, 1, g.tween.Ease.In.Linear)
		end)
	end
end

function interface:hideSafeIndicator()
	if self.safeIndicatorShown then
		self.safeIndicatorShown = false
	end
end

function interface:showCombatLogIndicator()
	self.combatLogIndicatorGui = g.player.Character.Head.LabelBillboardGui.Combat
	if not self.combatLogIndicatorShown then
		self.combatLogIndicatorShown = true
		self.combatLogIndicatorGui.Visible = true
	end
end

function interface:hideCombatLogIndicator()
	if self.combatLogIndicatorShown then
		self.combatLogIndicatorShown = false
		self.combatLogIndicatorGui = false
	end
end

function interface:showPounds()
	local poundsGui = self.gui.Pounds
	if not self.poundsShown and not self.menuShown then
		self.poundsShown = true
		poundsGui:TweenPosition(UDim2.new(0, 0, 1, -150), "Out", "Linear", 0.2, true)
	end
end

function interface:hidePounds()
	local poundsGui = self.gui.Pounds
	if self.poundsShown then
		self.poundsShown = false
		poundsGui:TweenPosition(UDim2.new(0, 0, 1, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:updatePounds(pounds, oldPounds)
	local poundsGui = self.gui.Pounds
	poundsGui.Amount.Text = pounds .. " pound(s)"
	local poundsDifference = pounds - oldPounds
	g.tween:TweenNumber(poundsGui.Amount, "TextTransparency", 0, 0.2, g.tween.Ease.In.Linear)
	g.tween:TweenNumber(poundsGui.Amount, "TextStrokeTransparency", 0, 0.2, g.tween.Ease.In.Linear)
	g.tween:TweenNumber(poundsGui.Icon, "ImageTransparency", 0.1, 0.2, g.tween.Ease.In.Linear)

	local differenceGui = poundsGui.Amount:Clone()
	differenceGui.TextTransparency = 1
	differenceGui.TextStrokeTransparency = 1
	differenceGui.ZIndex = 2
	if poundsDifference < 0 then
		differenceGui.TextColor3 = Color3.fromRGB(255, 150, 150)
		differenceGui.Text = poundsDifference .. " pound(s)"
	else
		differenceGui.Text = "+" .. poundsDifference .. " pound(s)"
	end
	differenceGui.Parent = poundsGui
	differenceGui:TweenPosition(UDim2.new(0, 0, 1, -110), "Out", "Linear", 0.2, true)
	g.tween:TweenNumber(differenceGui, "TextTransparency", 0, 0.2, g.tween.Ease.In.Linear)
	g.tween:TweenNumber(differenceGui, "TextStrokeTransparency", 0, 0.2, g.tween.Ease.In.Linear)

	self:showPounds()

	delay(0.2, function()
		g.tween:TweenNumber(poundsGui.Amount, "TextTransparency", 0.2, 0.5, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(poundsGui.Amount, "TextStrokeTransparency", 0.5, 0.5, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(poundsGui.Icon, "ImageTransparency", 0.5, 0.5, g.tween.Ease.In.Linear)

		differenceGui:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Linear", 4, true)
		g.tween:TweenNumber(differenceGui, "TextTransparency", 1, 4, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(differenceGui, "TextStrokeTransparency", 1, 4, g.tween.Ease.In.Linear)
		task.wait(4)
		differenceGui:Destroy()
		if not self.inventoryShown and not self.bankShown and not self.shopShown then
			self:hidePounds()
		end
	end)
end

function interface:showStockPounds()
	local poundsGui = self.gui.StockPounds
	if not self.stockPoundsShown then
		self.stockPoundsShown = true
		poundsGui:TweenPosition(UDim2.new(0, 0, 1, -150), "Out", "Linear", 0.2, true)
	end
end

function interface:hideStockPounds()
	local poundsGui = self.gui.StockPounds
	if self.stockPoundsShown then
		self.stockPoundsShown = false
		poundsGui:TweenPosition(UDim2.new(0, 0, 1, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:updateStockPounds(pounds, oldPounds)
	local poundsGui = self.gui.StockPounds
	poundsGui.Amount.Text = pounds .. " pound(s)"
	local poundsDifference = pounds - oldPounds
	g.tween:TweenNumber(poundsGui.Amount, "TextTransparency", 0, 0.2, g.tween.Ease.In.Linear)
	g.tween:TweenNumber(poundsGui.Amount, "TextStrokeTransparency", 0, 0.2, g.tween.Ease.In.Linear)
	g.tween:TweenNumber(poundsGui.Icon, "ImageTransparency", 0.1, 0.2, g.tween.Ease.In.Linear)

	local differenceGui = poundsGui.Amount:Clone()
	differenceGui.TextTransparency = 1
	differenceGui.TextStrokeTransparency = 1
	differenceGui.ZIndex = 2
	if poundsDifference < 0 then
		differenceGui.TextColor3 = Color3.fromRGB(255, 150, 150)
		differenceGui.Text = poundsDifference .. " pound(s)"
	else
		differenceGui.Text = "+" .. poundsDifference .. " pound(s)"
	end
	differenceGui.Parent = poundsGui
	differenceGui:TweenPosition(UDim2.new(0, 0, 1, -110), "Out", "Linear", 0.2, true)
	g.tween:TweenNumber(differenceGui, "TextTransparency", 0, 0.2, g.tween.Ease.In.Linear)
	g.tween:TweenNumber(differenceGui, "TextStrokeTransparency", 0, 0.2, g.tween.Ease.In.Linear)

	delay(0.2, function()
		g.tween:TweenNumber(poundsGui.Amount, "TextTransparency", 0.2, 0.5, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(poundsGui.Amount, "TextStrokeTransparency", 0.5, 0.5, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(poundsGui.Icon, "ImageTransparency", 0.5, 0.5, g.tween.Ease.In.Linear)

		differenceGui:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Linear", 2, true)
		g.tween:TweenNumber(differenceGui, "TextTransparency", 1, 2, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(differenceGui, "TextStrokeTransparency", 1, 2, g.tween.Ease.In.Linear)
		task.wait(2)
		differenceGui:Destroy()
	end)
end

function interface:newHint(hint)
	if not self.gui then
		return
	end

	local hintGui = self.gui:WaitForChild("Hint")
	if hint and string.len(hint) > 0 then
		local hintLine = g.guis.HintLine:Clone()
		for i, v in pairs(hintGui:GetChildren()) do
			coroutine.wrap(function()
				local offset = v.Position.Y.Offset - 20
				v:TweenPosition(UDim2.new(0, 0, 1, offset), "Out", "Linear", 0.1, true)
				if offset == -100 then
					g.tween:TweenNumber(v, "TextTransparency", 1, 0.2, g.tween.Ease.In.Linear)
					task.wait(0.2)
					v:Destroy()
				end
			end)()
		end
		hintLine.Parent = hintGui
		coroutine.wrap(function()
			for i = 1, string.len(hint) do
				hintLine.Text = string.sub(hint, 1, i)
				task.wait()
			end
			task.wait(g.stats.arbs.hintLifeTime)
			g.tween:TweenNumber(hintLine, "TextTransparency", 1, 0.2, g.tween.Ease.In.Linear)
			task.wait(0.2)
			hintLine:Destroy()
		end)()
	end
end

function interface:showDefaultControls()
	local controlsGui = self.gui.Controls
	for i, v in pairs(g.stats.arbs.defaultControls) do
		self:addControl(g.stats.controlNames[v], g.stats.controls[v])
	end
end

function interface:showFistsControls()
	self:addControl(g.stats.controlNames["hitRight"], g.stats.controls["hitRight"])
	self:addControl(g.stats.controlNames["hitLeft"], g.stats.controls["hitLeft"])
end

function interface:hideFistsControls()
	self:removeControl(g.stats.controlNames["hitRight"])
	self:removeControl(g.stats.controlNames["hitLeft"])
end

function interface:showInventoryControls()
	self:addControl(g.stats.controlNames["manipulateItem"], "HOLD MOUSE1")
	self:addControl(g.stats.controlNames["consumeItem"], "MOUSE2")
end

function interface:hideInventoryControls()
	self:removeControl(g.stats.controlNames["manipulateItem"])
	self:removeControl(g.stats.controlNames["consumeItem"])
end

function interface:showItemControls(item)
	if item.stats.controlIndexes then
		for i, v in pairs(item.stats.controlIndexes) do
			self:addControl(item.stats.controlNames[v], v)
		end
	end
end

function interface:hideItemControls(item)
	if item.stats.controlIndexes then
		for i, v in pairs(item.stats.controlIndexes) do
			self:removeControl(item.stats.controlNames[v])
		end
	end
end

function interface:addControl(controlName, control)
	local controlsGui = self.gui.Controls
	if not controlsGui:FindFirstChild(controlName) then
		local controlGui = g.guis.ControlLine:Clone()
		controlGui.Name = controlName
		controlGui.Text = string.upper(control) .. " - " .. controlName
		controlGui.Parent = controlsGui
	end
end

function interface:removeControl(controlName)
	if not self.gui then
		return
	end

	if not self.gui:FindFirstChild("Controls") then
		return
	end

	local controlsGui = self.gui.Controls
	local controlGui = controlsGui:FindFirstChild(controlName)
	if controlGui then
		controlGui:Destroy()
	end
end

function interface:showChat()
	local chatGui = self.gui.Chat
	if not self.chatShown then
		self.chatShown = true
		chatGui:TweenSize(UDim2.new(0.31, 0, 0, 300), "Out", "Linear", 0.2, true)
	end
end

function interface:hideChat()
	local chatGui = self.gui.Chat
	if self.chatShown then
		self.chatShown = false
		chatGui:TweenSize(UDim2.new(0, 0, 0, 0), "Out", "Linear", 0.2, true)
	end
end

function interface:toggleWhisper()
	if self.whispering then
		self:hideWhisper()
	else
		self:showWhisper()
	end
end

function interface:showWhisper()
	local chatGui = self.gui.Chat
	if not self.whispering then
		self.whispering = true
		self:newHint("You are now whispering")
		g.tween:TweenNumber(chatGui.Whisper, "ImageTransparency", 0, 0, g.tween.Ease.In.Linear)
	end
end

function interface:hideWhisper()
	local chatGui = self.gui.Chat
	if self.whispering then
		self.whispering = false
		self:newHint("You are no longer whispering")
		g.tween:TweenNumber(chatGui.Whisper, "ImageTransparency", 0.6, 0.1, g.tween.Ease.In.Linear)
	end
end

function interface:startChat()
	local chatGui = self.gui.Chat
	if not self.chatting then
		g.interaction:reset()
		if not chatGui.ChatBar:IsFocused() then
			chatGui.ChatBar:CaptureFocus()
		end
		self:hideInventory()
		self.chatting = true
		g.tween:TweenNumber(chatGui.ChatBar.Display, "ImageTransparency", 0.2, 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(chatGui.ChatBar, "TextColor3", Color3.fromRGB(0, 0, 0), 0.1, g.tween.Ease.In.Linear)
		if chatGui.ChatBar.Text == "Press / to chat" then
			chatGui.ChatBar.Text = ""
		end
		if self.currentChatTab ~= "Local" then
			--	g.stance:useRadioStart()
			local radioItem = g.inventory:getEquippedTypeItem("radio")
			if radioItem then
				radioItem.model.Body.Start:Play()
			end
		end
	end
end

function interface:endChat(send)
	local chatGui = self.gui.Chat
	if self.chatting and tick() - self.lastChat > 0.2 then
		self.chatting = false
		self.lastChat = tick()
		g.tween:TweenNumber(chatGui.ChatBar.Display, "ImageTransparency", 0.8, 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(chatGui.ChatBar, "TextColor3", Color3.fromRGB(255, 255, 255), 0.1, g.tween.Ease.In.Linear)
		if send and string.len(chatGui.ChatBar.Text) > 0 then
			local chat = chatGui.ChatBar.Text
			chatGui.ChatBar.Text = "Press / to chat"
			if chat:sub(1, 1) == "/" then
				chat = chat:sub(2)
			end
			local playersSeen = g.misc.request("sendChat", chat, self.whispering)
			for i, v in pairs(playersSeen) do
				if g.player ~= v then
					spawn(function()
						g.otherPlayer:get(v):indicateChatSeen()
					end)
				end
			end
		elseif chatGui.ChatBar.Text == "" then
			chatGui.ChatBar.Text = "Press / to chat"
		end
	end
end

function interface:addChatTab(chatTab)
	local chatGui = self.gui.Chat
	if not g.misc.find(self.chatTabs, chatTab) then
		table.insert(self.chatTabs, chatTab)
		local buttonGui = g.guis.ChatButton:Clone()
		local frameGui = g.guis.ChatsFrame:Clone()
		buttonGui.Name = chatTab
		buttonGui.Title.Text = chatTab
		buttonGui.Parent = chatGui.Tabs
		frameGui.Name = chatTab
		frameGui.Parent = chatGui.Frames

		buttonGui.MouseEnter:Connect(function()
			if self.currentChatTab ~= chatTab then
				self:highlightCursor()
				g.tween:TweenColor3(
					buttonGui,
					"ImageColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
				g.tween:TweenColor3(buttonGui.Title, "TextColor3", Color3.fromRGB(0, 0, 0), 0.1, g.tween.Ease.In.Linear)
			end
		end)

		buttonGui.MouseLeave:Connect(function()
			if self.currentChatTab ~= chatTab then
				self:unhighlightCursor()
				g.tween:TweenColor3(
					buttonGui,
					"ImageColor3",
					Color3.fromRGB(180, 170, 140),
					0.1,
					g.tween.Ease.In.Linear
				)
				g.tween:TweenColor3(
					buttonGui.Title,
					"TextColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
			end
		end)

		buttonGui.Activated:Connect(function()
			if self.currentChatTab ~= chatTab and g.stance:canDoAction() then
				self.currentChatTab = chatTab
				self:hideChatTabs()
				g.tween:TweenColor3(
					buttonGui,
					"ImageColor3",
					Color3.fromRGB(220, 210, 180),
					0.1,
					g.tween.Ease.In.Linear
				)
				g.tween:TweenColor3(
					buttonGui.Title,
					"TextColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
				frameGui:TweenSizeAndPosition(UDim2.new(1, 0, 5, 0), UDim2.new(0, 0, -4, 0), "Out", "Linear", 0.1, true)
				g.tween:TweenNumber(buttonGui.Notification, "TextTransparency", 1, 0.2, g.tween.Ease.In.Linear)
				chatGui.Whisper.Visible = chatTab == "Local"
				if chatTab ~= "Local" then
					local radioItem = g.inventory:getEquippedTypeItem("radio")
					if radioItem then
						radioItem.model.Body.Switch:Play()
					end
				end
			end
		end)
	end
end

function interface:removeChatTab(chatTab)
	local chatGui = self.gui.Chat
	if g.misc.find(self.chatTabs, chatTab) then
		g.misc.remove(self.chatTabs, chatTab)
		chatGui.Tabs[chatTab]:Destroy()
		chatGui.Frames[chatTab]:Destroy()
		self:showDefaultChatTab()
	end
end

function interface:hideChatTabs()
	local chatGui = self.gui.Chat
	for i, v in pairs(chatGui.Frames:GetChildren()) do
		v:TweenSizeAndPosition(UDim2.new(1, 0, 0, 0), UDim2.new(0, 0, 0, 0), "Out", "Linear", 0.1, true)
	end
	for i, v in pairs(chatGui.Tabs:GetChildren()) do
		if v:IsA("ImageButton") then
			g.tween:TweenColor3(v, "ImageColor3", Color3.fromRGB(180, 170, 140), 0.09, g.tween.Ease.In.Linear)
		end
	end
	self:unhighlightCursor()
end

function interface:showDefaultChatTab()
	local chatGui = self.gui.Chat
	self:hideChatTabs()
	self.currentChatTab = "Local"
	chatGui.Frames.Local:TweenSizeAndPosition(UDim2.new(1, 0, 5, 0), UDim2.new(0, 0, -4, 0), "Out", "Linear", 0.1, true)
	g.tween:TweenColor3(chatGui.Tabs.Local, "ImageColor3", Color3.fromRGB(220, 210, 180), 0.1, g.tween.Ease.In.Linear)
end

function interface:newChat(player, chat)
	local chatGui = self.gui.Chat
	local chatTab = chatGui.Frames:FindFirstChild("Local")
	if not chatTab then return warn("No Chat Tab") end
	local chatLine = g.guis.ChatLine:Clone()
	chatLine.Tag.Title.Text = player.Name
	local sizeOffset = string.len(player.Name) * 8
	chatLine.Tag.Size = UDim2.new(0, sizeOffset, 1, -2)
	chatLine.Chat.Position = UDim2.new(0, sizeOffset + 10, 0, 0)
	chatLine.Chat.Size = UDim2.new(1, -(sizeOffset + 10), 1, 0)
	chatLine.Chat.Text = chat
	chatLine.Parent = chatTab
	if player.Status:WaitForChild("Role").Value == "Colonist" then
		g.tween:TweenColor3(chatLine.Tag, "ImageColor3", Color3.fromRGB(130, 130, 130), 0.2, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			chatLine.Tag.Shadow,
			"ImageColor3",
			Color3.fromRGB(130, 130, 130),
			0.2,
			g.tween.Ease.In.Linear
		)
	elseif player.Status:WaitForChild("Role").Value == "HBC" then
		g.tween:TweenColor3(chatLine.Tag, "ImageColor3", Color3.fromRGB(70, 130, 180), 0.2, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			chatLine.Tag.Shadow,
			"ImageColor3",
			Color3.fromRGB(51, 96, 132),
			0.2,
			g.tween.Ease.In.Linear
		)
	elseif player.Status:WaitForChild("Role").Value == "NWC" then
		g.tween:TweenColor3(chatLine.Tag, "ImageColor3", Color3.fromRGB(121, 37, 31), 0.2, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			chatLine.Tag.Shadow,
			"ImageColor3",
			Color3.fromRGB(100, 0, 0),
			0.2,
			g.tween.Ease.In.Linear
		)
	elseif player.Status:WaitForChild("Role").Value == "Native" then
		g.tween:TweenColor3(chatLine.Tag, "ImageColor3", Color3.fromRGB(138, 99, 100), 0.2, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			chatLine.Tag.Shadow,
			"ImageColor3",
			Color3.fromRGB(138, 99, 100),
			0.2,
			g.tween.Ease.In.Linear
		)
	end

	g.tween:TweenNumber(chatLine.Chat, "TextTransparency", 0, 0.2, g.tween.Ease.In.Linear)
	g.tween:TweenNumber(chatLine.Chat, "TextStrokeTransparency", 0.5, 0.2, g.tween.Ease.In.Linear)
	chatLine.Name = "0"

	for i, v in pairs(chatTab:GetChildren()) do
		if v:IsA("Frame") then
			v.Name = tonumber(v.Name) + 1
			if tonumber(v.Name) == 20 then
				v:Destroy()
			end
		end
	end
end

function interface:SendServerChatMessage(player, chat, sender)
	local chatGui = self.gui.Chat
	local chatTab = chatGui.Frames.Local
	local chatLine = g.guis.ChatLine:Clone()
	chatLine.Tag.Title.Text = player
	local sizeOffset = string.len(player) * 8
	chatLine.Tag.Size = UDim2.new(0, sizeOffset, 1, -2)
	chatLine.Chat.Position = UDim2.new(0, sizeOffset + 10, 0, 0)
	chatLine.Chat.Size = UDim2.new(1, -(sizeOffset + 10), 1, 0)
	chatLine.Chat.Text = chat
	chatLine.Parent = chatTab

	if sender == "system" then
		local randomservermessagecolor = math.random(1, #g.stats.servernotificationcolors)
		local randomservermessagecolordata = g.stats.servernotificationcolors[randomservermessagecolor]

		g.tween:TweenColor3(
			chatLine.Tag,
			"ImageColor3",
			randomservermessagecolordata.color,
			0.2,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			chatLine.Tag.Shadow,
			"ImageColor3",
			randomservermessagecolordata.color,
			0.2,
			g.tween.Ease.In.Linear
		)
	end

	g.tween:TweenNumber(chatLine.Chat, "TextTransparency", 0, 0.2, g.tween.Ease.In.Linear)
	g.tween:TweenNumber(chatLine.Chat, "TextStrokeTransparency", 0.5, 0.2, g.tween.Ease.In.Linear)
	chatLine.Name = "0"

	for i, v in pairs(chatTab:GetChildren()) do
		if v:IsA("Frame") then
			v.Name = tonumber(v.Name) + 1
			if tonumber(v.Name) == 20 then
				v:Destroy()
			end
		end
	end
end

function interface:showBackground()
	if not self.backgroundShown then
		self.backgroundShown = true
		delay(0.1, function()
			local tweenInfo = TweenInfo.new(0.2)
			g.tweenService:Create(self.backgroundBlur, tweenInfo, { Size = 25 }):Play()
			g.tweenService:Create(self.backgroundColorCorrection, tweenInfo, { Saturation = -1 }):Play()
			g.tweenService:Create(self.backgroundColorCorrection, tweenInfo, { Brightness = 0 }):Play()
		end)
	end
end

function interface:hideBackground()
	if self.backgroundShown then
		self.backgroundShown = false
		g.tween:TweenNumber(self.backgroundBlur, "Size", 0, 0.2, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(self.backgroundColorCorrection, "Saturation", 0, 0.2, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(self.backgroundColorCorrection, "Brightness", 0, 0.2, g.tween.Ease.In.Linear)
	end
end

function interface:moveCursor()
	if self.gui then
		local cursorGui = self.gui.Cursor
		cursorGui.Position = UDim2.new(0, g.mouse.X, 0, g.mouse.Y)
	end
end

function interface:highlightCursor()
	local cursorGui = self.gui.Cursor
	if not self.cursorHighlighted then
		self.cursorHighlighted = true
		cursorGui.Icon:TweenSizeAndPosition(UDim2.new(0, 20, 0, 20), UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.2, true)
		g.tweenService
			:Create(
				cursorGui.Icon,
				TweenInfo.new(0.2),
				{ ImageColor3 = g.stats.colors.highlighted, ImageTransparency = 0 }
			)
			:Play()
	end
end

function interface:highlightCursorColor(CursorColor)
	local cursorGui = self.gui.Cursor
	if not self.cursorHighlighted then
		self.cursorHighlighted = true
		cursorGui.Icon:TweenSizeAndPosition(UDim2.new(0, 20, 0, 20), UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.2, true)
		g.tweenService
			:Create(cursorGui.Icon, TweenInfo.new(0.2), { ImageColor3 = CursorColor, ImageTransparency = 0 })
			:Play()
	end
end

function interface:setCursorImage(Id)
	local cursorImageHolder = self.gui.Cursor

	cursorImageHolder.Aiming.Image = "rbxassetid://".. Id
	cursorImageHolder.Icon.Image = "rbxassetid://".. Id
end

function interface:SetCursorColor(CursorColor)
	local cursorGui = self.gui.Cursor
	g.tweenService
		:Create(cursorGui.Icon, TweenInfo.new(0.2), { ImageColor3 = CursorColor, ImageTransparency = 0.2 })
		:Play()
end

function interface:SetCursorHitMarker(CursorColor)
	if self.hitmarkerShown == false then
		local cursorGui = self.gui.Cursor

		self.hitmarkerShown = true
		cursorGui.Aiming.Visible = false
		cursorGui.Icon.Visible = true

		g.tweenService
			:Create(cursorGui.Icon, TweenInfo.new(0.2), { ImageColor3 = CursorColor, ImageTransparency = 0.2 })
			:Play()
		task.wait(1)
		g.tweenService
			:Create(
				cursorGui.Icon,
				TweenInfo.new(0.2),
				{ ImageColor3 = g.stats.colors.cursorcolor, ImageTransparency = 0.2 }
			)
			:Play()
		self.hitmarkerShown = false
	end
end

function interface:unhighlightCursor()
	local cursorGui = self.gui.Cursor
	if self.cursorHighlighted then
		self.cursorHighlighted = false
		cursorGui.Icon:TweenSizeAndPosition(UDim2.new(0, 10, 0, 10), UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.2, true)
		g.tweenService
			:Create(
				cursorGui.Icon,
				TweenInfo.new(0.2),
				{ ImageColor3 = g.stats.colors.cursorcolor, ImageTransparency = 0.2 }
			)
			:Play()
	end
end

function interface:showInteraction(interactionText)
	local cursorGui = self.gui.Cursor
	if not self.interactionShown or interactionText ~= self.interactionText then
		self.interactionShown = true
		self.interactionText = interactionText
		cursorGui.Interaction.Control.Text = string.upper(g.stats.controls.interact)
		cursorGui.Interaction:TweenSizeAndPosition(
			UDim2.new(0, 30, 0, 30),
			UDim2.new(0, 30, 0, -15),
			"Out",
			"Quad",
			0.1,
			true
		)
		g.tween:TweenColor3(
			cursorGui.Interaction,
			"ImageColor3",
			g.stats.colors.interactioncolor,
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			cursorGui.Interaction.Shadow,
			"ImageColor3",
			g.stats.colors.interactioncolor,
			0.1,
			g.tween.Ease.In.Linear
		)

		g.tween:TweenNumber(cursorGui.InteractionHint, "TextTransparency", 0, 0.1, g.tween.Ease.In.Linear)
		coroutine.wrap(function()
			for i = 1, string.len(interactionText) do
				if self.interactionShown and interactionText == self.interactionText then
					cursorGui.InteractionHint.Text = string.sub(interactionText, 1, i)
					task.wait()
				end
			end
		end)()
	end
end

function interface:hideInteraction()
	local cursorGui = self.gui.Cursor
	if self.interactionShown then
		self.interactionShown = false
		self.interactionText = nil
		--		g.stance:unfollowMouse()
		self:unhighlightInteraction()
		cursorGui.Interaction:TweenSizeAndPosition(
			UDim2.new(0, 0, 0, 0),
			UDim2.new(0, 45, 0, 0),
			"Out",
			"Quad",
			0.1,
			true
		)
		g.tween:TweenNumber(cursorGui.InteractionHint, "TextTransparency", 1, 0.1, g.tween.Ease.In.Linear)
	end
end

function interface:highlightInteraction(debounce)
	local cursorGui = self.gui.Cursor
	if not self.interactionHighlighted then
		self.interactionHighlighted = true
		cursorGui.Interaction.Highlight:TweenSize(UDim2.new(1, 0, 1, 0), "Out", "Linear", debounce, true)
	end
end

function interface:unhighlightInteraction()
	local cursorGui = self.gui.Cursor
	if self.interactionHighlighted then
		self.interactionHighlighted = false
		cursorGui.Interaction.Highlight:TweenSize(UDim2.new(0, 0, 1, 0), "Out", "Quad", 0.1, true)
	end
end

function interface:showRespawn()
	local respawnGui = self.gui.Respawn
	if not self.respawnShown then
		self.respawnShown = true
		respawnGui:TweenSizeAndPosition(
			UDim2.new(0, 200, 0, 50),
			UDim2.new(0.5, -100, 1, -200),
			"Out",
			"Quad",
			0.1,
			true
		)
		g.tween:TweenColor3(
			respawnGui.Display,
			"ImageColor3",
			Color3.fromRGB(220, 210, 180),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(respawnGui.Title, "TextColor3", Color3.fromRGB(136, 136, 136), 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			respawnGui.Title.Details,
			"TextColor3",
			Color3.fromRGB(136, 136, 136),
			0.1,
			g.tween.Ease.In.Linear
		)
		local cooldown = g.stats.places[game.PlaceId].respawnCooldown
		for i = cooldown, 1, -1 do
			if not g.player or not g.player.Status then
				break
			end

			if g.player.Status.Downed.Value == false then
				respawnGui.Title.Details.Text = "in 10 seconds"
				break
			end

			respawnGui.Title.Details.Text = "in " .. i .. " seconds"
			task.wait(1)
		end
		g.tween:TweenColor3(respawnGui.Display, "ImageColor3", g.stats.colors.highlighted, 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(respawnGui.Title, "TextColor3", Color3.fromRGB(255, 255, 255), 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			respawnGui.Title.Details,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		respawnGui.Title.Details.Text = "press " .. string.upper(g.stats.controls.respawn)
	end
end

function interface:hideRespawn()
	local respawnGui = self.gui.Respawn
	if self.respawnShown then
		self.respawnShown = false
		respawnGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Quad", 0.1, true)
		g.tween:TweenColor3(
			respawnGui.Display,
			"ImageColor3",
			Color3.fromRGB(220, 210, 180),
			0.1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(respawnGui.Title, "TextColor3", Color3.fromRGB(136, 136, 136), 0.1, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			respawnGui.Title.Details,
			"TextColor3",
			Color3.fromRGB(136, 136, 136),
			0.1,
			g.tween.Ease.In.Linear
		)
	end
end

function interface:updateHealth(damage)
	local healthGui = self.gui.Integrity.Health
	healthGui.Bar.ImageColor3 = Color3.fromRGB(255, 255, 255)
	g.tween:TweenColor3(healthGui.Bar, "ImageColor3", g.stats.colors.health, 0.1, g.tween.Ease.In.Linear)
	healthGui.Bar:TweenSize(UDim2.new(g.integrity.health / g.integrity.maxHealth, 0, 1, 0), "Out", "Quad", 0.1, true)
	if damage > 3 then
		self.damageColorCorrection.TintColor = g.stats.colors.damage
	end
	g.tween:TweenColor3(
		self.damageColorCorrection,
		"TintColor",
		Color3.fromRGB(255, 255, 255),
		0.1,
		g.tween.Ease.In.Linear
	)
	g.tween:TweenNumber(
		self.damageColorCorrection,
		"Saturation",
		-1 + (g.integrity.health / g.integrity.maxHealth),
		0.1,
		g.tween.Ease.In.Linear
	)
end

function interface:updateHunger()
	local hungerGui = self.gui.Integrity.Hunger
	hungerGui.Bar:TweenSize(
		UDim2.new(g.integrity.hunger / g.stats.arbs.defaultMaxHunger, 0, 1, 0),
		"Out",
		"Linear",
		0.1,
		true
	)
end

function interface:updateThirst()
	local thirstGui = self.gui.Integrity.Thirst
	thirstGui.Bar:TweenSize(
		UDim2.new(g.integrity.thirst / g.stats.arbs.defaultMaxThirst, 0, 1, 0),
		"Out",
		"Linear",
		0.1,
		true
	)
end

function interface:updateStamina()
	local staminaGui = self.gui.Integrity.Stamina
	staminaGui.Bar:TweenSize(
		UDim2.new(g.integrity.stamina / g.stats.arbs.defaultMaxStamina, 0, 1, 0),
		"Out",
		"Linear",
		g.stats.arbs.staminaRegenDebounceTime,
		true
	)
	if g.integrity.staminaAvailable then
		g.tween:TweenColor3(staminaGui.Bar, "ImageColor3", g.stats.colors.stamina, 0.1, g.tween.Ease.In.Linear)
	else
		g.tween:TweenColor3(staminaGui.Bar, "ImageColor3", g.stats.colors.staminalow, 0.1, g.tween.Ease.In.Linear)
	end
end

function interface:updateWarmth()
	local warmthGui = self.gui.Integrity.Warmth
	warmthGui.Bar:TweenSize(
		UDim2.new(g.integrity.warmth / g.stats.arbs.defaultMaxWarmth, 0, 1, 0),
		"Out",
		"Linear",
		0.1,
		true
	)
end

function interface:updateWarmthLost(warmthLost)
	local warmthGui = self.gui.Integrity.Warmth
	if warmthLost == 0 then
		warmthGui.WarmthLost.Text = "0"
		g.tween:TweenColor3(
			warmthGui.WarmthLost,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenNumber(warmthGui.WarmthLost, "TextTransparency", 0.5, 1, g.tween.Ease.In.Linear)
	elseif warmthLost > 0 then
		warmthGui.WarmthLost.Text = "- " .. math.abs(warmthLost)
		g.tween:TweenColor3(
			warmthGui.WarmthLost,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenNumber(warmthGui.WarmthLost, "TextTransparency", 0, 1, g.tween.Ease.In.Linear)
	elseif warmthLost < 0 then
		warmthGui.WarmthLost.Text = "+ " .. math.abs(warmthLost)
		g.tween:TweenColor3(
			warmthGui.WarmthLost,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			1,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenNumber(warmthGui.WarmthLost, "TextTransparency", 0, 1, g.tween.Ease.In.Linear)
	end
end

function interface:toggleCrafting()
	if tick() - self.lastCraftingToggle > g.stats.arbs.craftingToggleDebounceTime and not self.itemDragging then
		self.lastCraftingToggle = tick()
		if self.craftingShown then
			self:hideCrafting()
		else
			self:showCrafting()
		end
	end
end

function interface:showCrafting(craftingStationType)
	local craftingGui = self.gui.Crafting
	local itemsGui = craftingGui.Items
	local informationGui = craftingGui.Information

	if not self.craftingShown and (g.stance:canDoAction() or craftingStationType) then
		g.stance:endStances()
		self.craftingShown = true
		self:showBackground()
		self:hideToolbar()
		g.stance:updateWalkSpeed()

		craftingGui:TweenSizeAndPosition(
			UDim2.new(0, 720, 0, 600),
			UDim2.new(0.5, -360, 0.5, -300),
			"Out",
			"Quad",
			0.2,
			true
		)
		self:showBackground()
		g.stance:updateWalkSpeed()
		self:hideToolbar()
		self:refreshCraftableItems(craftingStationType)

		if not workspace:FindFirstChild("ShowInventory") then
			local newshowinventorysound = g.sounds.ShowInventory:Clone()
			newshowinventorysound.Parent = workspace
			newshowinventorysound:Play()

			newshowinventorysound.Ended:Connect(function()
				task.wait()
				newshowinventorysound:Remove()
			end)
		end

		informationGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				informationGui.Close,
				"ImageColor3",
				g.stats.colors.highlighted,
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		informationGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				informationGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		informationGui.Close.Activated:Connect(function()
			self:hideCrafting()
			self:unhighlightCursor()
		end)
	end
end

function interface:hideCrafting()
	local craftingGui = self.gui.Crafting
	local itemsGui = craftingGui.Items
	local informationGui = craftingGui.Information
	if self.craftingShown then
		self.craftingShown = false
		craftingGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Quad", 0.2, true)
		self:unhighlightCursor()
		self:hideBackground()

		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end

		g.stance:updateWalkSpeed()

		if not workspace:FindFirstChild("HideInventory") then
			local newhideinventorysound = g.sounds.HideInventory:Clone()
			newhideinventorysound.Parent = workspace
			newhideinventorysound:Play()

			newhideinventorysound.Ended:Connect(function()
				task.wait()
				newhideinventorysound:Remove()
			end)
		end
	end
end

function interface:showSettings()

end

function interface:hideSettings()
	local settingsGui = self.gui.Settings

	if self.settingsShown then
		self.settingsShown = false
		self:unhighlightCursor()
		self:hideBackground()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.stance:updateWalkSpeed()

		settingsGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Quad", 0.2, true)

		if not workspace:FindFirstChild("HideInventory") then
			local newhideinventorysound = g.sounds.HideInventory:Clone()
			newhideinventorysound.Parent = workspace
			newhideinventorysound:Play()

			newhideinventorysound.Ended:Connect(function()
				task.wait()
				newhideinventorysound:Remove()
			end)
		end
	end
end

function interface:CheckIfQuestCompleted(TakenQuestData)
	local QuestCompletedState = g.quests.CheckIfQuestCompleted(g.player, TakenQuestData)

	if QuestCompletedState == true then
		g.misc.request("QuestCompleted")
		return true
	else
		local QuestStatusMessage = g.quests.GetQuestStatusMessage(g.player, TakenQuestData.QuestId)

		if QuestStatusMessage ~= "" then
			self:newHint(QuestStatusMessage)
			return false
		end

		return false
	end
end

function interface:showQuests(quest)
	local questGui = self.gui.Quest
	local QuestsGuiRoot = questGui:FindFirstChild("QuestRoot")

	if not self.questShown then
		self.currentQuest = quest

		for i, v in pairs(QuestsGuiRoot.QuestScrollFrame:GetChildren()) do
			if v:IsA("Frame") and v.Name ~= "UIListLayout" then
				v:Destroy()
			end
		end

		self:hideChat()
		self:showPounds()
		g.stance:endStances()
		self:showBackground()
		g.stance:updateWalkSpeed()
		self:hideToolbar()
		self.questShown = true

		if not workspace:FindFirstChild("ShowShop") then
			local newshowshopsound = g.sounds.ShowShop:Clone()
			newshowshopsound.Parent = workspace
			newshowshopsound:Play()

			newshowshopsound.Ended:Connect(function()
				task.wait()
				newshowshopsound:Remove()
			end)
		end

		questGui:TweenSize(UDim2.new(1, 0, 1, 0), "Out", "Quad", 0.1, true)

		questGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(questGui.Close, "ImageColor3", g.stats.colors.highlighted, 0.1, g.tween.Ease.In.Linear)
		end)

		questGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				questGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		questGui.Close.Activated:Connect(function()
			self:hideQuests()
		end)

		local gameQuests = g.quests.getQuestData(quest)

		if not gameQuests then
			self:hideQuests()
			return
		end

		local TotalQuests = 0

		for i, v in pairs(gameQuests) do
			TotalQuests = TotalQuests + 1
			local NewQuestFrame = g.guis.QuestFrame:Clone()
			local NewQuestFrameRoot = NewQuestFrame:FindFirstChild("QuestRoot")

			local QuestProgressData = g.quests.GetQuestProgressMessage(g.player, v.QuestData.QuestId)

			NewQuestFrame.Name = i
			NewQuestFrameRoot.Title.Text = quest
			NewQuestFrameRoot.ProgressText.Text = tostring(QuestProgressData)
			NewQuestFrameRoot.Description.Text = v.QuestData.Description
			NewQuestFrame.Parent = QuestsGuiRoot.QuestScrollFrame

			NewQuestFrameRoot.QuestSubmit.MouseEnter:Connect(function()
				self:highlightCursor()
				g.tween:TweenColor3(
					NewQuestFrameRoot.Box,
					"ImageColor3",
					g.stats.colors.highlighted,
					0.1,
					g.tween.Ease.In.Linear
				)
			end)

			NewQuestFrameRoot.QuestSubmit.MouseLeave:Connect(function()
				self:unhighlightCursor()
				g.tween:TweenColor3(
					NewQuestFrameRoot.Box,
					"ImageColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
			end)

			NewQuestFrameRoot.QuestSubmit.Activated:Connect(function()
				local PlayerQuestFolder = g.player.Status:FindFirstChild("Quests")
				local CurrentQuestValue = PlayerQuestFolder:FindFirstChild("currentQuest")

				if PlayerQuestFolder.QuestTaken.Value == false then
					self:hideQuests()
					g.misc.request("takeQuest", v)
				else
					local TakenQuestData =
						g.quests.getQuestDataById(g.player.Status.Role.Value, CurrentQuestValue.Value)
					self:CheckIfQuestCompleted(TakenQuestData.QuestData)
				end
			end)
		end
	end
	QuestsGuiRoot.QuestScrollFrame.CanvasSize = UDim2.new(0, 0, 2, #QuestsGuiRoot.QuestScrollFrame:GetChildren() * 100)
end

function interface:hideQuests()
	local questGui = self.gui.Quest
	local QuestsGuiRoot = questGui:FindFirstChild("QuestRoot")

	self.questShown = false
	self.currentQuest = nil
	self:hideBackground()
	self:hidePounds()
	self:unhighlightCursor()
	self:showChat()
	g.stance:updateWalkSpeed()
	if g.player.Status.Tutorial.TutorialStarted.Value == false then
		self:showToolbar()
	end

	questGui:TweenSize(UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.1, true)
end

function interface:UpdateTutorialTitle()
	local tutorialGui = self.gui.Tutorial
	local selectedroletext = ""
	local currentuttorialstage = g.player.Status.Tutorial.TutorialStage

	--// i know string.upper exists but this might be useful one day
	if g.player.Status.Role.Value == "Colonist" then
		selectedroletext = "COLONIST TUTORIAL"
	elseif g.player.Status.Role.Value == "Native" then
		selectedroletext = "NATIVE TUTORIAL"
	elseif g.player.Status.Role.Value == "HBC" then
		selectedroletext = "HBC TUTORIAL"
	elseif g.player.Status.Role.Value == "NWC" then
		selectedroletext = "TCT TUTORIAL"
	else
		warn("couldnt find role with name of  " .. tostring(g.player.Status.Role.Value))
		selectedroletext = "TUTORIAL"
	end

	tutorialGui.TutorialRole.Text = selectedroletext
		.. " "
		.. tostring(currentuttorialstage.Value)
		.. " /"
		.. g.tutorial.TotalTutorialStages
end

function interface:updateTutorialDescription(DescriptionText)
	if not DescriptionText then
		warn("updateTutorialDescription: DescriptionText is nil")
		DescriptionText = ""
	end

	local tutorialGui = self.gui.Tutorial

	if tutorialGui.Description.Text == DescriptionText then
		return
	end

	tutorialGui.Description.Text = ""

	tutorialGui.Description.Text = DescriptionText
	tutorialGui.Description.MaxVisibleGraphemes = -1

	local newtexttweeninfo = TweenInfo.new(1.650, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

	local newtexttween = g.tweenService:Create(tutorialGui.Description, newtexttweeninfo, {
		MaxVisibleGraphemes = utf8.len(DescriptionText),
	})

	newtexttween:Play()

	newtexttween.Completed:Connect(function()
		task.wait()
		tutorialGui.Description.MaxVisibleGraphemes = -1
	end)

	--[[
	for i = 1, string.len(DescriptionText) do
		tutorialGui.Description.Text = string.sub(DescriptionText, 1, i)
		task.wait()
	end
	--]]
end

function interface:oldTutorial()
	local tutorialGui = self.gui.Tutorial

	self.tutorialShown = true

	tutorialGui:TweenSizeAndPosition(
		UDim2.new(0.465, 0, 0.223, 0),
		UDim2.new(0.265, 0, 0.770, 0),
		Enum.EasingDirection.Out,
		Enum.EasingStyle.Quad,
		0.2,
		true
	)

	tutorialGui.BackButton.Activated:Connect(function()
		g.tutorial:UpdateTutorialStage("previous")
	end)

	tutorialGui.BackButton.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			tutorialGui.BackButton,
			"TextColor3",
			g.stats.colors.highlighted,
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	tutorialGui.BackButton.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			tutorialGui.BackButton,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	tutorialGui.NextButton.Activated:Connect(function()
		g.tutorial:UpdateTutorialStage("next")
	end)

	tutorialGui.NextButton.MouseEnter:Connect(function()
		self:highlightCursor()
		g.tween:TweenColor3(
			tutorialGui.NextButton,
			"TextColor3",
			g.stats.colors.highlighted,
			0.1,
			g.tween.Ease.In.Linear
		)
	end)

	tutorialGui.NextButton.MouseLeave:Connect(function()
		self:unhighlightCursor()
		g.tween:TweenColor3(
			tutorialGui.NextButton,
			"TextColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
	end)
end

function interface:hideTutorial()
	local tutorialGui = self.gui.TutorialPopup

	self.tutorialShown = false
	tutorialGui.Visible = false

	self:showIntegrity()
	self:showTabs()
	self:showToolbar()
	--tutorialGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Quad", 0.2, true)
end

function interface:showShop(shop)
	local shopGui = self.gui.Shop
	local itemsGui = shopGui.Items
	local informationGui = shopGui.Information
	if not self.shopShown then
		self.currentShop = shop
		local shopStats = g.stats.shops[shop]
		self:hideChat()
		self:showPounds()
		g.stance:endStances()
		self.shopShown = true
		itemsGui.Title.Text = shopStats.name
		shopGui:TweenSizeAndPosition(
			UDim2.new(0, 800, 0, 600),
			UDim2.new(0.5, -380, 0.5, -300),
			"Out",
			"Quad",
			0.2,
			true
		)
		--g.tween:TweenNumber(itemsGui.TitleBox.Title, "TextTransparency", 0, .2, g.tween.Ease.In.Linear)

		for i, v in pairs(shopStats.items) do
			self.currentCategory = i
			break
		end

		self:showBackground()
		g.stance:updateWalkSpeed()
		self:hideToolbar()

		local newshowshopsound = g.sounds.ShowShop:Clone()
		newshowshopsound.Parent = workspace
		newshowshopsound:Play()

		newshowshopsound.Ended:Connect(function()
			task.wait()
			newshowshopsound:Remove()
		end)

		informationGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				informationGui.Close,
				"ImageColor3",
				g.stats.colors.highlighted,
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		informationGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				informationGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		informationGui.Close.Activated:Connect(function()
			self:hideShop()
		end)

		if not g.economy.transactionInProgress then
			self:refreshShopItems()
		end
	end
end

function interface:hideShop()
	local shopGui = self.gui.Shop
	local itemsGui = shopGui.Items
	local informationGui = shopGui.Information
	if self.shopShown then
		self.shopShown = false
		self.currentShop = nil
		shopGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Quad", 0.2, true)
		--g.tween:TweenNumber(itemsGui.TitleBox.Title, "TextTransparency", 1, .2, g.tween.Ease.In.Linear)
		g.tween:TweenColor3(
			informationGui.Close,
			"ImageColor3",
			Color3.fromRGB(255, 255, 255),
			0.1,
			g.tween.Ease.In.Linear
		)
		self:hideBackground()
		self:hidePounds()
		self:unhighlightCursor()
		self:showChat()
		g.stance:updateWalkSpeed()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.sounds.HideShop:Play()
		self.currentCategory = ""
	end
end

function interface:showStocks()
	local stocksGui = self.gui.Stocks
	local itemsGui = stocksGui.Items
	if not self.stocksShown and g.player:GetRankInGroup(34472814) >= 150 then
		self:hideChat()
		self:hideIntegrity()
		self:showStockPounds()
		g.stance:endStances()
		self.stocksShown = true
		stocksGui.Items.Close.Modal = true
		stocksGui:TweenSizeAndPosition(
			UDim2.new(0, 720, 0, 500),
			UDim2.new(0.5, -360, 0.5, -250),
			"Out",
			"Quad",
			0.2,
			true
		)
		g.tween:TweenNumber(itemsGui.TitleBox.Title, "TextTransparency", 0, 0.2, g.tween.Ease.In.Linear)
		self:showBackground()
		g.stance:updateWalkSpeed()
		self:hideToolbar()
		g.sounds.ShowShop:Play()

		itemsGui.Filter.Changed:Connect(function()
			for i, v in pairs(itemsGui.List:GetChildren()) do
				if v:IsA("Frame") then
					v.Visible = string.find(string.lower(v.Name), string.lower(itemsGui.Filter.Text))
				end
			end
		end)

		if not g.economy.transactionInProgress then
			self:refreshStockItems()
		end
	end
end

function interface:hideStocks()
	local stocksGui = self.gui.Stocks
	local itemsGui = stocksGui.Items
	if self.stocksShown then
		self.stocksShown = false
		stocksGui.Items.Close.Modal = false
		stocksGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Quad", 0.2, true)
		g.tween:TweenNumber(itemsGui.TitleBox.Title, "TextTransparency", 1, 0.2, g.tween.Ease.In.Linear)
		self:hideBackground()
		self:unhighlightCursor()
		self:hideStockPounds()
		self:showChat()
		self:showIntegrity()
		g.stance:updateWalkSpeed()
		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end
		g.sounds.HideShop:Play()
	end
end

function interface:weaponBlur(lifetime)
	local blur = g.storage:FindFirstChild("WeaponBlur"):Clone()
	blur.Parent = g.lighting
	game.Debris:AddItem(blur, lifetime)
end

function interface:refreshCraftableItems(craftingStation)
	local craftingGui = self.gui.Crafting
	local itemsGui = craftingGui.Items
	if self.craftingShown then
		local craftableItemsAmount = 0
		for i, v in pairs(itemsGui.List:GetChildren()) do
			if v:IsA("Frame") then
				v:Destroy()
			end
		end
		for i, v in pairs(g.stats.items) do
			if
				v.canBeCrafted
				and (not v.requiredCraftRole or g.misc.find(v.requiredCraftRole, g.role.name))
				and (not v.requiredCraftingStation or v.requiredCraftingStation == craftingStation)
				and (not v.consumableType or (v.consumableType == "food" and g.integrity.heatSourceNearby))
			then
				local item = g.item.new(i)
				local canBeCrafted = true
				local craftableItemGui = g.guis.CraftableItem:Clone()
				craftableItemsAmount = craftableItemsAmount + 1
				craftableItemGui.Title.Text = i
				if item.stats.craftAmount then
					craftableItemGui.Title.Text = craftableItemGui.Title.Text .. " (x" .. item.stats.craftAmount .. ")"
				end
				
				print(v.description)
				
				for j, k in pairs(v.requiredCraftItems) do
					local craftableItemRequirementGui = g.guis.CraftableItemRequirement:Clone()
					craftableItemRequirementGui.Text = "- " .. string.upper(string.sub(j, 1, 1)) .. string.sub(j, 2)
					if not g.stats.items[j] then
						craftableItemRequirementGui.Text = craftableItemRequirementGui.Text .. " (any type)"
					end
					if k > 1 then
						craftableItemRequirementGui.Text = craftableItemRequirementGui.Text .. " (x" .. k .. ")"
					end
					if g.inventory:hasItemWithAmount(j, k) then
						craftableItemRequirementGui.TextTransparency = 0
					else
						canBeCrafted = false
						craftableItemRequirementGui.TextTransparency = 0.5
					end
					craftableItemRequirementGui.Parent = craftableItemGui.Requirements
				end
				if canBeCrafted then
					craftableItemGui.Craft.ImageTransparency = 0.6
					craftableItemGui.Craft.MouseEnter:Connect(function()
						self:highlightCursor()
						g.tween:TweenNumber(craftableItemGui.Craft, "ImageTransparency", 0, 0.1, g.tween.Ease.In.Linear)
					end)

					craftableItemGui.Craft.MouseLeave:Connect(function()
						self:unhighlightCursor()
						g.tween:TweenNumber(
							craftableItemGui.Craft,
							"ImageTransparency",
							0.6,
							0.1,
							g.tween.Ease.In.Linear
						)
					end)

					craftableItemGui.Craft.Activated:Connect(function()
						self:unhighlightCursor()
						g.inventory:craftItem(item.name, craftingStation)
					end)
				else
					craftableItemGui.Craft.ImageTransparency = 0.9
				end
				craftableItemGui.Parent = itemsGui.List
				craftableItemGui.MouseEnter:Connect(function()
					g.tween:TweenColor3(
						craftableItemGui.Display,
						"ImageColor3",
						Color3.fromRGB(139, 139, 139),
						0.1,
						g.tween.Ease.In.Linear
					)
					self:showItem(item, "Crafting")
				end)

				craftableItemGui.MouseLeave:Connect(function()
					g.tween:TweenColor3(
						craftableItemGui.Display,
						"ImageColor3",
						Color3.fromRGB(109, 109, 109),
						0.1,
						g.tween.Ease.In.Linear
					)
					self:hideItem(item, "Crafting")
				end)

				if not canBeCrafted and v.type == "consumable" then
					craftableItemGui:Destroy()
				end
			end
			itemsGui.Title.Details.Text = craftableItemsAmount .. " available"
		end
	end
end

function interface:refreshShopItems()
	if self.shopShown and not g.economy.transactionInProgress then
		local shopStats = g.stats.shops[self.currentShop]
		local shopGui = self.gui.Shop
		local itemsGui = shopGui.Items

		for i, v in pairs(itemsGui.List:GetChildren()) do
			if v:IsA("Frame") then
				v:Destroy()
			end
		end

		for i, v in pairs(itemsGui.TitleBox.Categories:GetChildren()) do
			if v:IsA("ImageButton") then
				v:Destroy()
			end
		end

		local shopDividerGui = g.guis.ShopDivider:Clone()
		shopDividerGui.Title.Text = "SHOP ITEMS"
		shopDividerGui.Parent = itemsGui.List

		-- test
		for i, v in pairs(shopStats.items) do
			local shopCategory = g.guis.ShopCategory:Clone()
			shopCategory.Name = i
			shopCategory.Title.Text = i
			shopCategory.Parent = itemsGui.TitleBox.Categories

			shopCategory.MouseEnter:Connect(function()
				self:highlightCursor()
				g.tween:TweenNumber(shopCategory.Title, "TextTransparency", 0, 0.1, g.tween.Ease.In.Linear)
			end)

			shopCategory.MouseLeave:Connect(function()
				self:unhighlightCursor()
				g.tween:TweenNumber(shopCategory.Title, "TextTransparency", 0.4, 0.1, g.tween.Ease.In.Linear)
			end)

			shopCategory.Activated:Connect(function()
				self.currentCategory = i
				self:refreshShopItems()
			end)
		end

		if self.currentCategory ~= "" then
			for i, v in pairs(shopStats.items[self.currentCategory]) do
				local item = g.item.new(i)
				local shopItemGui = g.guis.ShopItem:Clone()
				shopItemGui.Title.Text = i
				--if not g.economy.stocks[i] then return end
				local itemAmount = math.min(v, g.economy.stocks[i])
				local itemCost = item.stats.value * math.max(1, itemAmount) * shopStats.purchaseCoefficient
				local enoughPounds = g.inventory.pounds >= itemCost
				local inStock = g.economy.stocks[i] > 0
				local free = itemCost == 0

				if itemAmount > 1 then
					shopItemGui.Title.Text = shopItemGui.Title.Text .. " (x" .. itemAmount .. ")"
				end

				shopItemGui.Requirements.Stock.Text = g.economy.stocks[i] .. " in stock"

				if free then
					shopItemGui.Transaction.Text = "TAKE"
					shopItemGui.Requirements.Cost.Text = "Free"
				else
					shopItemGui.Transaction.Text = "PURCHASE"
					shopItemGui.Requirements.Cost.Text = tostring(itemCost) .. " pound(s)"
				end

				if (enoughPounds or free) and inStock then
					shopItemGui.Transaction.MouseEnter:Connect(function()
						if not g.economy.transactionInProgress then
							self:highlightCursor()
							g.tween:TweenNumber(
								shopItemGui.Transaction,
								"TextTransparency",
								0,
								0.1,
								g.tween.Ease.In.Linear
							)
						end
					end)

					shopItemGui.Transaction.MouseLeave:Connect(function()
						if not g.economy.transactionInProgress then
							self:unhighlightCursor()
							g.tween:TweenNumber(
								shopItemGui.Transaction,
								"TextTransparency",
								0.4,
								0.1,
								g.tween.Ease.In.Linear
							)
						end
					end)

					shopItemGui.Transaction.Activated:Connect(function()
						if not g.economy.transactionInProgress then
							if free then
								shopItemGui.Transaction.Text = "TAKING"
							else
								shopItemGui.Transaction.Text = "PURCHASING"
							end
							local newpurchaseitemsound = g.sounds.PurchaseItem:Clone()
							newpurchaseitemsound.Parent = workspace
							newpurchaseitemsound:Play()

							newpurchaseitemsound.Ended:Connect(function()
								task.wait()
								newpurchaseitemsound:Remove()
							end)

							g.economy:purchaseItem(self.currentShop, i, itemAmount)
						end
					end)
				else
					if not enoughPounds then
						shopItemGui.Transaction.Text = "NOT ENOUGH POUNDS"
					end

					if not inStock then
						shopItemGui.Transaction.Text = "ITEM OUT OF STOCK"
						shopItemGui.Requirements.Stock.TextTransparency = 0.5
					end
				end

				shopItemGui.MouseEnter:Connect(function()
					g.tween:TweenColor3(
						shopItemGui.Display,
						"ImageColor3",
						Color3.fromRGB(139, 139, 139),
						0.1,
						g.tween.Ease.In.Linear
					)
					self:showItem(item, "Shop")
				end)

				shopItemGui.MouseLeave:Connect(function()
					g.tween:TweenColor3(
						shopItemGui.Display,
						"ImageColor3",
						Color3.fromRGB(109, 109, 109),
						0.1,
						g.tween.Ease.In.Linear
					)
					self:hideItem(item, "Shop")
				end)

				shopItemGui.Parent = itemsGui.List
			end

			shopDividerGui = g.guis.ShopDivider:Clone()
			shopDividerGui.Title.Text = "YOUR ITEMS"
			shopDividerGui.Parent = itemsGui.List

			for i, v in pairs(g.inventory.backpack) do
				if v.stats.canBeSold and not itemsGui.List:FindFirstChild(v.name) then
					
					if shopStats.name == "JordanFrit's Trapper and Co." then
						if v.stats.type ~= "fur" and v.stats.type ~= "feather" then
							continue
						end
					end
					
					local itemAmount = g.inventory:getBackpackAmountNameItem(v.name)
					local sellAmount = itemAmount
					local SellItemGui = g.guis.SellItem:Clone()
					SellItemGui.Name = v.name
					SellItemGui.Title.Text = v.name
					SellItemGui.Transaction.Text = "SELL"

					SellItemGui.Requirements.Cost.Text = math.max(
						1,
						math.floor(v.stats.value * shopStats.sellCoefficient)
					) .. " pound(s)"
					SellItemGui.Requirements.Stock.Text = itemAmount .. " in inventory"

					SellItemGui.Transaction.MouseEnter:Connect(function()
						if not g.economy.transactionInProgress then
							self:highlightCursor()
							g.tween:TweenNumber(
								SellItemGui.Transaction,
								"TextTransparency",
								0,
								0.1,
								g.tween.Ease.In.Linear
							)
						end
					end)

					SellItemGui.Transaction.MouseLeave:Connect(function()
						if not g.economy.transactionInProgress then
							self:unhighlightCursor()
							g.tween:TweenNumber(
								SellItemGui.Transaction,
								"TextTransparency",
								0.4,
								0.1,
								g.tween.Ease.In.Linear
							)
						end
					end)

					SellItemGui.Transaction.Activated:Connect(function()
						if not g.economy.transactionInProgress then
							SellItemGui.Transaction.Text = "SELLING"

							if not workspace:FindFirstChild("SellItem") then
								local newsellitemsound = g.sounds.SellItem:Clone()
								newsellitemsound.Parent = workspace
								newsellitemsound:Play()

								newsellitemsound.Ended:Connect(function()
									task.wait()
									newsellitemsound:Remove()
								end)
							end

							g.economy:sellItem(self.currentShop, v, sellAmount)
						end
					end)

					if itemAmount > 1 then
						g.tween:TweenNumber(SellItemGui.Amount, "TextTransparency", 0, 0.1, g.tween.Ease.In.Linear)
						g.tween:TweenNumber(
							SellItemGui.Amount.Display,
							"ImageTransparency",
							0,
							0.1,
							g.tween.Ease.In.Linear
						)
						SellItemGui.Amount.Text = sellAmount
						SellItemGui.Amount.TextTransparency = 0
						SellItemGui.Amount.Display.ImageTransparency = 0

						SellItemGui.Amount.FocusLost:Connect(function()
							local rawSellAmount = tonumber(SellItemGui.Amount.Text)
							if rawSellAmount then
								rawSellAmount = math.max(1, math.floor(rawSellAmount))
							end
							sellAmount = rawSellAmount or sellAmount
							SellItemGui.Amount.Text = sellAmount
						end)
					end

					SellItemGui.MouseEnter:Connect(function()
						g.tween:TweenColor3(
							SellItemGui.Display,
							"ImageColor3",
							Color3.fromRGB(139, 139, 139),
							0.1,
							g.tween.Ease.In.Linear
						)
						self:showItem(v, "Shop")
					end)

					SellItemGui.MouseLeave:Connect(function()
						g.tween:TweenColor3(
							SellItemGui.Display,
							"ImageColor3",
							Color3.fromRGB(109, 109, 109),
							0.1,
							g.tween.Ease.In.Linear
						)
						self:hideItem(v, "Shop")
					end)

					SellItemGui.Parent = itemsGui.List
				end
			end

			itemsGui.List.CanvasSize = UDim2.new(0, 0, 0, #itemsGui.List:GetChildren() * 70)
		end
	end
end

function interface:disableShopItems()
	local shopGui = self.gui.Shop
	local itemsGui = shopGui.Items
	for i, v in pairs(itemsGui.List:GetChildren()) do
		if v:FindFirstChild("Transaction") then
			if v.Transaction.TextTransparency < 1 then
				g.tween:TweenNumber(v.Transaction, "TextTransparency", 0.8, 0.1, g.tween.Ease.In.Linear)
				g.tween:TweenNumber(v.Amount, "TextTransparency", 1, 0.1, g.tween.Ease.In.Linear)
				g.tween:TweenNumber(v.Amount.Display, "ImageTransparency", 1, 0.1, g.tween.Ease.In.Linear)
			end
		end
	end
	self:unhighlightCursor()
end

function interface:disableStockItems()
	local stockGui = self.gui.Stocks
	local itemsGui = stockGui.Items
	for i, v in pairs(g.economy.stocks) do
		if v > 0 then
			g.tween:TweenNumber(itemsGui.List[i].Export.Export, "TextTransparency", 0.8, 0.1, g.tween.Ease.In.Linear)
			g.tween:TweenNumber(itemsGui.List[i].Import.Import, "TextTransparency", 0.8, 0.1, g.tween.Ease.In.Linear)
		end
	end
	self:unhighlightCursor()
end

function interface:toggleInventory()
	if tick() - self.lastInventoryToggle > g.stats.arbs.inventoryToggleDebounceTime and not self.itemDragging then
		self.lastInventoryToggle = tick()
		if self.inventoryShown then
			self:hideInventory()
		else
			self:showInventory()
		end
	end
end

function interface:showInventory()
	local inventoryGui = self.gui.Inventory
	local backpackGui = inventoryGui.Backpack
	local equipmentGui = inventoryGui.Equipment
	local informationGui = inventoryGui.Information
	self:hideCrafting()
	self:hideBank()
	self:hideShop()
	self:hideStore()
	if not self.inventoryShown and g.stance:canDoAction() then
		self:hideChat()
		g.stance:endStances()
		self:showPounds()
		self.inventoryShown = true
		inventoryGui:TweenSizeAndPosition(UDim2.new(0, 1100, 0, 400),UDim2.new(0.5, -550, 0.5, -200),"Out","Quad",0.2,true)
		backpackGui.TitleBox.Title.TextTransparency = 0
		equipmentGui.TitleBox.Title.TextTransparency = 0
		informationGui.TitleBox.Title.TextTransparency = 0

		self:showBackground()
		g.stance:updateWalkSpeed()
		self:hideToolbar()
		self:showInventoryControls()

		if not workspace:FindFirstChild("ShowInventory") then
			local newshowinventorysound = g.sounds.ShowInventory:Clone()
			newshowinventorysound.Parent = workspace
			newshowinventorysound:Play()

			newshowinventorysound.Ended:Connect(function()
				task.wait()
				newshowinventorysound:Remove()
			end)
		end

		informationGui.Close.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				informationGui.Close,
				"ImageColor3",
				g.stats.colors.highlighted,
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		informationGui.Close.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				informationGui.Close,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		informationGui.Close.Activated:Connect(function()
			self:hideInventory()
			self:unhighlightCursor()
		end)
	end
end

function interface:hideInventory()
	local inventoryGui = self.gui.Inventory
	local backpackGui = inventoryGui.Backpack
	local equipmentGui = inventoryGui.Equipment
	local informationGui = inventoryGui.Information
	if self.inventoryShown then
		self.inventoryShown = false
		self:hideItem(self.itemTargetting, "Inventory")
		inventoryGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Quad", 0.2, true)
		g.tween:TweenNumber(backpackGui.TitleBox.Title, "TextTransparency", 1, 0.2, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(equipmentGui.TitleBox.Title, "TextTransparency", 1, 0.2, g.tween.Ease.In.Linear)
		g.tween:TweenNumber(informationGui.TitleBox.Title, "TextTransparency", 1, 0.2, g.tween.Ease.In.Linear)
		self:dragItemEnd()
		self:hidePounds()
		self:hideBackground()
		self:unhighlightCursor()
		self:showChat()
		g.stance:updateWalkSpeed()
		self:hideInventoryControls()

		if g.player.Status.Tutorial.TutorialStarted.Value == false then
			self:showToolbar()
		end

		if not workspace:FindFirstChild("HideInventory") then
			local newhideinventorysound = g.sounds.HideInventory:Clone()
			newhideinventorysound.Parent = workspace
			newhideinventorysound:Play()

			newhideinventorysound.Ended:Connect(function()
				task.wait()
				newhideinventorysound:Remove()
			end)
		end
	end
end

function interface:updateInventoryLists()
	local backpackGui = self.gui.Inventory.Backpack
	local equipmentGui = self.gui.Inventory.Equipment
	backpackGui.Title.Text = "Items stored - " .. #g.inventory.backpack
	backpackGui.Title.Details.Text = g.inventory.weight .. " / " .. g.inventory.maxWeight .. " space taken"
	equipmentGui.Title.Text = "Items equipped - " .. #g.inventory.equipment
	backpackGui.List.CanvasSize = UDim2.new(0, 0, 0, (#backpackGui.List:GetChildren() - 1) * 50)
	equipmentGui.List.CanvasSize = UDim2.new(0, 0, 0, (#equipmentGui.List:GetChildren() - 1) * 50)
end

function interface:addItem(item)
	local backpackGui = self.gui.Inventory.Backpack
	local itemGui = g.guis.ItemBox:Clone()

	itemGui.Name = item.name
	itemGui.Title.Text = item.name
	item.gui = itemGui
	self:ConnectItem(item, item.gui)
	if item.equipped then
		self:equipItem(item)
	else
		self:unequipItem(item)
	end
	self:updateInventoryLists()
end

function interface:ConnectItem(item, itemGui)
	if item.guiConnectionEnter and item.guiConnectionLeave then
		item.guiConnectionEnter:Disconnect()
		item.guiConnectionLeave:Disconnect()
	end
	item.gui = itemGui
	item.guiConnectionEnter = item.gui.MouseEnter:Connect(function()
		if item.gui.Parent then
			self:showItem(item, "Inventory")
		end
	end)

	item.guiConnectionLeave = item.gui.MouseLeave:Connect(function()
		if item.gui.Parent then
			self:hideItem(item, "Inventory")
		end
	end)
end

function interface:showItem(item, actionType)
	local informationGui = self.gui[actionType].Information
	if not self.itemDragging then
		self.itemTargetting = item
		if actionType == "Inventory" then
			self:highlightCursor()
			g.tween:TweenColor3(item.gui.Amount, "TextColor3", g.stats.colors.highlighted, 0.1, g.tween.Ease.In.Linear)
			g.tween:TweenColor3(item.gui.Title, "TextColor3", g.stats.colors.highlighted, 0.1, g.tween.Ease.In.Linear)
			informationGui.ImageI.Image = item.gui.ImageI.Image
		end

		if self.itemTargetting and item == self.itemTargetting then
			informationGui.Title.Text = item.name
			informationGui.Weight.Text = tostring(item.stats.weight) .. " space taken"
			informationGui.Description.Text = item.stats.description
		end
	end
end

function interface:hideItem(item, actionType)
	if item then
		local informationGui = self.gui[actionType].Information

		self.itemTargetting = nil

		if actionType == "Inventory" then
			self:unhighlightCursor()
			if item.gui then
				g.tween:TweenColor3(
					item.gui.Amount,
					"TextColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
				g.tween:TweenColor3(
					item.gui.Title,
					"TextColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
			end
		end
		informationGui.Title.Text = ""
		informationGui.ImageI.Image = ""
		informationGui.Weight.Text = ""
		informationGui.Description.Text = ""
		informationGui.Title.Details.Text = ""
	end
end

function interface:equipItem(item)
	local cursorGui = self.gui.Cursor
	local equipmentGui = self.gui.Inventory.Equipment
	if item.gui then
		local amount = g.inventory:getBackpackAmountNameItem(item.name)
		if item.gui.Parent == cursorGui or amount == 1 then
			item.gui.Parent = equipmentGui.List
		else
			item.gui.Amount.Text = tonumber(amount - 1)
			local itemGui = item.gui:Clone()
			itemGui.Amount.Text = "1"
			itemGui.Parent = equipmentGui.List
			self:ConnectItem(item, itemGui)
		end
		item.gui.Size = UDim2.new(1, -20, 0, 40)
		self:updateInventoryLists()
	end
end

function interface:unequipItem(item)
	if not self.gui then
		return
	end

	if not self.gui:FindFirstChild("Cursor") then
		return
	end

	local cursorGui = self.gui.Cursor
	local backpackGui = self.gui.Inventory.Backpack
	local equipmentGui = self.gui.Inventory.Equipment
	if item.gui then
		local itemGui = backpackGui.List:FindFirstChild(item.name)
		if itemGui then
			itemGui.Amount.Text = tonumber(itemGui.Amount.Text) + 1
			if item.gui.Parent == cursorGui or item.gui.Parent == equipmentGui.List then
				item.gui:Destroy()
			end
			self:ConnectItem(item, itemGui)
		else
			item.gui.Parent = backpackGui.List
			item.gui.Size = UDim2.new(1, -20, 0, 40)
		end
		self:removeToolItem(item)
		self:updateInventoryLists()
	end
end

function interface:updateToolItems()
	local toolbarGui = self.gui:WaitForChild("Toolbar")

	for i, v in pairs(toolbarGui:GetChildren()) do
		if v:IsA("ImageButton") then
			v:Destroy()
		end
	end
	for i, v in pairs(g.inventory.tools) do
		if v.stats.canBeDrawn then
			v.toolGui = g.guis.ToolBox:Clone()
			v.toolGui.Title.Text = v.name
			v.toolGui.Control.Text = g.stats.arbs.additionalToolControls[i] or i
			v.toolGui.Parent = toolbarGui
			v.toolGui.MouseEnter:Connect(function()
				if not v.drawn then
					self:highlightCursor()
					g.tween:TweenColor3(
						v.toolGui.Title,
						"TextColor3",
						Color3.fromRGB(101, 96, 81),
						0.2,
						g.tween.Ease.In.Linear
					)
					g.tween:TweenColor3(
						v.toolGui.Control,
						"TextColor3",
						Color3.fromRGB(101, 96, 81),
						0.2,
						g.tween.Ease.In.Linear
					)
					v.toolGui:TweenSize(UDim2.new(0, 90, 0, 90), "Out", "Quad", 0.1, true)
				end
			end)

			v.toolGui.MouseLeave:Connect(function()
				if not v.drawn then
					self:unhighlightCursor()
					g.tween:TweenColor3(
						v.toolGui.Title,
						"TextColor3",
						Color3.fromRGB(255, 255, 255),
						0.2,
						g.tween.Ease.In.Linear
					)
					g.tween:TweenColor3(
						v.toolGui.Control,
						"TextColor3",
						Color3.fromRGB(255, 255, 255),
						0.2,
						g.tween.Ease.In.Linear
					)
					v.toolGui:TweenSize(UDim2.new(0, 90, 0, 80), "Out", "Quad", 0.1, true)
				end
			end)

			v.toolGui.Activated:Connect(function()
				self:unhighlightCursor()
				g.tween:TweenColor3(
					v.toolGui.Title,
					"TextColor3",
					Color3.fromRGB(101, 96, 81),
					0.2,
					g.tween.Ease.In.Linear
				)
				g.tween:TweenColor3(
					v.toolGui.Control,
					"TextColor3",
					Color3.fromRGB(101, 96, 81),
					0.2,
					g.tween.Ease.In.Linear
				)
				v.toolGui:TweenSize(UDim2.new(0, 90, 0, 80), "Out", "Quad", 0.1, true)
				g.inventory:drawOrHolsterItem(v)
			end)
		end
	end
end

function interface:highlightToolItem(item)
	if item.toolGui and item.drawn then
		g.tween:TweenColor3(item.toolGui, "ImageColor3", g.stats.colors.highlighted, .2, g.tween.Ease.In.Linear)
		item.toolGui:TweenSize(UDim2.new(0, 90, 0, 90), "Out", "Quad", .1, true)
	end
end

function interface:unhighlightToolItem(item)
	if item.toolGui and not item.drawn then
		g.tween:TweenColor3(item.toolGui, "ImageColor3", Color3.fromRGB(180, 170, 140), .2, g.tween.Ease.In.Linear)
		item.toolGui:TweenSize(UDim2.new(0, 90, 0, 70), "Out", "Quad", .1, true)
	end
end


function interface:removeToolItem(item)
	if item.toolGui then
		item.toolGui:Destroy()
		item.toolGui = nil
	end
end

function interface:removeItem(item)
	if not self.gui then
		return
	end

	if not self.gui:FindFirstChild("Cursor") then
		return
	end

	local cursorGui = self.gui.Cursor
	local backpackGui = self.gui.Inventory.Backpack
	local equipmentGui = self.gui.Inventory.Equipment
	if item.guiConnectionEnter then
		item.guiConnectionEnter:Disconnect()
		item.guiConnectionEnter = nil
	end
	if item.guiConnectionLeave then
		item.guiConnectionLeave:Disconnect()
		item.guiConnectionLeave = nil
	end
	if item.gui then
		if not self.itemDragging or self.itemDragging ~= item then
			if tonumber(item.gui.Amount.Text) > 1 then
				item.gui.Amount.Text = tonumber(item.gui.Amount.Text) - 1
			else
				item.gui:Destroy()
			end
		else
			item.gui.Parent = cursorGui
			item.gui.ClipsDescendants = true
			item.gui:TweenSize(UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.1, true)
			g.debris:AddItem(item.gui, 0.1)
		end
		item.gui = nil
		self:unhighlightCursor()
		self:updateInventoryLists()
	end
end

function interface:showDropItem(item)
	local dropGui = self.gui.Inventory.Drop
	local dropAmount = 1
	if not self.dropItemShown then
		self.dropItemShown = true
		dropGui:TweenSizeAndPosition(
			UDim2.new(0, 200, 0, 120),
			UDim2.new(0.5, -100, 0.5, -60),
			"Out",
			"Quad",
			0.2,
			true
		)

		dropGui.Amount.Changed:Connect(function()
			local rawDropAmount = tonumber(dropGui.Amount.Text)
			if rawDropAmount then
				rawDropAmount = math.max(1, math.floor(rawDropAmount))
			end
			dropAmount = rawDropAmount or dropAmount
			dropGui.Amount.Text = dropAmount
		end)

		dropGui.Minus.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(
				dropGui.Minus,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				dropGui.Minus.Title,
				"TextColor3",
				g.stats.colors.highlighted,
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		dropGui.Minus.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(
				dropGui.Minus,
				"ImageColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
			g.tween:TweenColor3(
				dropGui.Minus.Title,
				"TextColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		dropGui.Minus.Activated:Connect(function()
			dropGui.Amount.Text = tostring(dropAmount - 1)
		end)

		dropGui.Plus.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(dropGui.Plus, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.1, g.tween.Ease.In.Linear)
			g.tween:TweenColor3(
				dropGui.Plus.Title,
				"TextColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		dropGui.Plus.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(dropGui.Plus, "ImageColor3", Color3.fromRGB(180, 170, 140), 0.1, g.tween.Ease.In.Linear)
			g.tween:TweenColor3(
				dropGui.Plus.Title,
				"TextColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		dropGui.Plus.Activated:Connect(function()
			dropGui.Amount.Text = tostring(dropAmount + 1)
		end)

		dropGui.Drop.MouseEnter:Connect(function()
			self:highlightCursor()
			g.tween:TweenColor3(dropGui.Plus, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.1, g.tween.Ease.In.Linear)
			g.tween:TweenColor3(dropGui.Plus.Title, "TextColor3", Color3.fromRGB(0, 0, 0), 0.1, g.tween.Ease.In.Linear)
		end)

		dropGui.Drop.MouseLeave:Connect(function()
			self:unhighlightCursor()
			g.tween:TweenColor3(dropGui.Drop, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.1, g.tween.Ease.In.Linear)
			g.tween:TweenColor3(
				dropGui.Drop.Title,
				"TextColor3",
				Color3.fromRGB(255, 255, 255),
				0.1,
				g.tween.Ease.In.Linear
			)
		end)

		dropGui.Drop.Activated:Connect(function() end)
	end
end

function interface:hideDropItem()
	local dropGui = self.gui.Inventory.Drop
	if self.dropItemShown then
		self.dropItemShown = false
		dropGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 0.5, 0), "Out", "Quad", 0.2, true)
	end
end

function interface:HandleCooldown()
	task.spawn(function()
		self.cooldown = true
		task.wait(self.cooldown_time)
		self.cooldown = false
	end)
end

function interface:dragItemStart()
	
	if not self.gui then
		return nil
	end

	local cursorGui = self.gui:WaitForChild("Cursor")
	local backpackGui = self.gui.Inventory.Backpack
	local equipmentGui = self.gui.Inventory.Equipment
	if self.inventoryShown and self.itemTargetting and not self.itemDragging and not self.dropItemShown then
		self.itemDragging = self.itemTargetting
		self.itemTargetting = nil
		self:hideItem(self.itemDragging, "Inventory")
		if tonumber(self.itemDragging.gui.Amount.Text) > 1 then
			self.itemDragging.gui.Amount.Text = tonumber(self.itemDragging.gui.Amount.Text) - 1
			local itemGui = self.itemDragging.gui:Clone()
			itemGui.Amount.Text = 1
			self:ConnectItem(self.itemDragging, itemGui)
		end
		self.itemDragging.gui.Parent = cursorGui
		self.itemDragging.gui.Position = UDim2.new(0, 20, 0, 20)
		self.itemDragging.gui.Size = UDim2.new(0, 0, 0, 0)
		self.itemDragging.gui:TweenSize(UDim2.new(0, 150, 0, 40), "Out", "Quad", 0.1, true)
		
		if self.itemDragging:canBeEquipped() then
			g.tween:TweenColor3(
				equipmentGui.Display,
				"ImageColor3",
				g.stats.colors.highlighted,
				0.2,
				g.tween.Ease.In.Linear
			)
		elseif self.itemDragging.equipped then
			g.tween:TweenColor3(
				backpackGui.Display,
				"ImageColor3",
				g.stats.colors.highlighted,
				0.2,
				g.tween.Ease.In.Linear
			)
		end
		self:unhighlightCursor()
	end
end

function interface:dragItemEnd()
	if not self.gui then
		return nil
	end

	local backpackGui = self.gui:WaitForChild("Inventory").Backpack
	local equipmentGui = self.gui.Inventory.Equipment
	if self.itemDragging then
		if self.inventoryHovered then
			if self.equipmentHovered then
				-- If it is hovering over toolbar/equipment section it equips if can be
				if self.itemDragging:canBeEquipped() then
					self.itemDragging:equip(true)
					self:HandleCooldown()
				-- elseif it is already equipped it resets
				elseif self.itemDragging.equipped then
					self:equipItem(self.itemDragging)
					self:HandleCooldown()
				-- else it unequips the item because it cannot be equipped
				else
					self:unequipItem(self.itemDragging)
				end
			-- If not hovering over equipment and it's equipped then it unequips
			elseif self.itemDragging.equipped then
				self.itemDragging:unequip()
				self:HandleCooldown()
			else
				--Else it was already unequipped it resets
				self:unequipItem(self.itemDragging)
			end
		else -- dropping items else statement
			if self.itemDragging.stats.canBeDropped == true then
				if self.itemDragging.equipped == false then
					self.itemDragging:drop()
				else
					self:equipItem(self.itemDragging)
					self:newHint("Equipped Item can not be dropped!")
				end
			else
				-- If it cannot be dropped it resets back to where it was
				if self.itemDragging.equipped then
					self:equipItem(self.itemDragging)
				else
					self:unequipItem(self.itemDragging)
				end
				self:newHint("This item can not be dropped!")
			end
		end

		g.tween:TweenColor3(
			equipmentGui.Display,
			"ImageColor3",
			Color3.fromRGB(210, 200, 170),
			0.2,
			g.tween.Ease.In.Linear
		)
		g.tween:TweenColor3(
			backpackGui.Display,
			"ImageColor3",
			Color3.fromRGB(210, 200, 170),
			0.2,
			g.tween.Ease.In.Linear
		)

		if self.itemDragging then
			if self.itemDragging.gui then
				g.tween:TweenColor3(
					self.itemDragging.gui.Amount,
					"TextColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
				g.tween:TweenColor3(
					self.itemDragging.gui.Title,
					"TextColor3",
					Color3.fromRGB(255, 255, 255),
					0.1,
					g.tween.Ease.In.Linear
				)
			end
		end

		self.itemDragging = nil
	end
end

function interface:checkUI()
	if self.gui then
		local inventoryframe = self.gui.Inventory
		local equipmentframe = self.gui.Inventory.Equipment

		--cursorGui.Position = UDim2.new(0, g.mouse.X, 0, g.mouse.Y)
	end
end

function interface:useItem()
	if self.itemTargetting and not self.itemDragging and self.inventoryShown then
		if self.itemTargetting.stats.type == "consumable" then
			if not workspace:FindFirstChild("ConsumeFood") then
				local numnomnum = g.sounds:FindFirstChild("ConsumeFood"):Clone()
				numnomnum.Parent = workspace
				numnomnum:Play()

				numnomnum.Ended:Connect(function()
					task.wait()
					numnomnum:Remove()
				end)
			end

			self.itemTargetting:consume()
			self:hideItem(self.itemDragging, "Inventory")
			self.itemTargetting = nil
			self:unhighlightCursor()
		elseif
			self.itemTargetting.stats.type == "deployable" or self.itemTargetting.stats.type == "faction_deployable"
		then
			g.interaction:deployItemStart(self.itemTargetting)
			--elseif self.itemTargetting:canBeEquipped() then
			--local equipmentGui = self.gui.Inventory.Equipment
			--print(self.itemTargetting.stats)
			--if equipmentGui.List:FindFirstChild(self.itemTargetting.stats.name) then
			--	self:unequipItem(self.itemTargetting)
			--else
			--self.itemTargetting:equip()
			--self:equipItem(self.itemTargetting)

			--interface:updateToolItems()
			--end
		end
	end
end

function interface:showToolbar()
	local toolBarGui = self.gui.Toolbar
	if not self.toolBarShown and g.stance:canDoAction() then
		self.toolBarShown = true
		toolBarGui:TweenSizeAndPosition(UDim2.new(1, 0, 0, 100), UDim2.new(0, 0, 1, -180), "Out", "Quad", 0.2, true)
	end
end

function interface:hideToolbar()
	local toolBarGui = self.gui.Toolbar
	if self.toolBarShown then
		self.toolBarShown = false
		toolBarGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Quad", 0.2, true)
	end
end

function interface:showIntegrity()
	local integrityGui = self.gui.Integrity
	if not self.integrityShown and not g.stance.downed then
		self.integrityShown = true
		integrityGui:TweenSizeAndPosition(
			UDim2.new(0, 700, 0, 50),
			UDim2.new(0.5, -350, 1, -70),
			"Out",
			"Quad",
			0.2,
			true
		)
	end
end

function interface:hideIntegrity()
	local integrityGui = self.gui.Integrity
	if self.integrityShown then
		self.integrityShown = false
		integrityGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 2, 0), "Out", "Quad", 0.2, true)
	end
end

function interface:showClipboard(item)
	local clipboardGui = self.gui.Clipboard
	if not self.clipboardShown then
		self.clipboardShown = true
		clipboardGui.Draggable = true
		clipboardGui.Title.Details.Text = "by " .. item.content.authorName
		clipboardGui.Sheet.Content.Text = item.content.text or ""
		clipboardGui:TweenSizeAndPosition(
			UDim2.new(0, 400, 0, 500),
			UDim2.new(0, 50, 1, -550),
			"Out",
			"Quad",
			0.2,
			true
		)
	end
end

function interface:hideClipboard(item)
	local clipboardGui = self.gui.Clipboard
	if self.clipboardShown then
		self.clipboardShown = false
		clipboardGui.Draggable = false
		item.content.text = clipboardGui.Sheet.Content.Text
		clipboardGui:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0, -30, 0.5, 0), "Out", "Quad", 0.2, true)
	end
end

function interface:showBleeding()
	if not self.bleedingShown then
		self.bleedingShown = true
		g.tween:TweenColor3(
			self.bleedingColorCorrection,
			"TintColor",
			Color3.fromRGB(255, 200, 200),
			1,
			g.tween.Ease.In.Linear
		)
	end
end

function interface:hideBleeding()
	if self.bleedingShown then
		self.bleedingShown = false
		g.tween:TweenColor3(
			self.bleedingColorCorrection,
			"TintColor",
			Color3.fromRGB(255, 255, 255),
			1,
			g.tween.Ease.In.Linear
		)
	end
end

return interface
