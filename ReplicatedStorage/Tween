--
-- Adapted from
-- Tweener's easing functions (Penner's Easing Equations)
-- and http://code.google.com/p/tweener/ (jstweener javascript version)
--

--[[
Disclaimer for Robert Penner's Easing Equations license:

TERMS OF USE - EASING EQUATIONS

Open source under the BSD License.

Copyright ï¿½ 2001 Robert Penner
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	* Neither the name of the author nor the names of contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
]]

-- For all easing functions:
-- t = elapsed time
-- b = begin
-- c = change == ending - beginning
-- d = duration (total time)

local pow = math.pow
local sin = math.sin
local cos = math.cos
local pi = math.pi
local sqrt = math.sqrt
local abs = math.abs
local asin  = math.asin

local function linear(t, b, c, d)
	return c * t / d + b
end

local function inQuad(t, b, c, d)
	t = t / d
	return c * pow(t, 2) + b
end

local function outQuad(t, b, c, d)
	t = t / d
	return -c * t * (t - 2) + b
end

local function inOutQuad(t, b, c, d)
	t = t / d * 2
	if t < 1 then
		return c / 2 * pow(t, 2) + b
	else
		return -c / 2 * ((t - 1) * (t - 3) - 1) + b
	end
end

local function outInQuad(t, b, c, d)
	if t < d / 2 then
		return outQuad (t * 2, b, c / 2, d)
	else
		return inQuad((t * 2) - d, b + c / 2, c / 2, d)
	end
end

local function inCubic (t, b, c, d)
	t = t / d
	return c * pow(t, 3) + b
end

local function outCubic(t, b, c, d)
	t = t / d - 1
	return c * (pow(t, 3) + 1) + b
end

local function inOutCubic(t, b, c, d)
	t = t / d * 2
	if t < 1 then
		return c / 2 * t * t * t + b
	else
		t = t - 2
		return c / 2 * (t * t * t + 2) + b
	end
end

local function outInCubic(t, b, c, d)
	if t < d / 2 then
		return outCubic(t * 2, b, c / 2, d)
	else
		return inCubic((t * 2) - d, b + c / 2, c / 2, d)
	end
end

local function inQuart(t, b, c, d)
	t = t / d
	return c * pow(t, 4) + b
end

local function outQuart(t, b, c, d)
	t = t / d - 1
	return -c * (pow(t, 4) - 1) + b
end

local function inOutQuart(t, b, c, d)
	t = t / d * 2
	if t < 1 then
		return c / 2 * pow(t, 4) + b
	else
		t = t - 2
		return -c / 2 * (pow(t, 4) - 2) + b
	end
end

local function outInQuart(t, b, c, d)
	if t < d / 2 then
		return outQuart(t * 2, b, c / 2, d)
	else
		return inQuart((t * 2) - d, b + c / 2, c / 2, d)
	end
end

local function inQuint(t, b, c, d)
	t = t / d
	return c * pow(t, 5) + b
end

local function outQuint(t, b, c, d)
	t = t / d - 1
	return c * (pow(t, 5) + 1) + b
end

local function inOutQuint(t, b, c, d)
	t = t / d * 2
	if t < 1 then
		return c / 2 * pow(t, 5) + b
	else
		t = t - 2
		return c / 2 * (pow(t, 5) + 2) + b
	end
end

local function outInQuint(t, b, c, d)
	if t < d / 2 then
		return outQuint(t * 2, b, c / 2, d)
	else
		return inQuint((t * 2) - d, b + c / 2, c / 2, d)
	end
end

local function inSine(t, b, c, d)
	return -c * cos(t / d * (pi / 2)) + c + b
end

local function outSine(t, b, c, d)
	return c * sin(t / d * (pi / 2)) + b
end

local function inOutSine(t, b, c, d)
	return -c / 2 * (cos(pi * t / d) - 1) + b
end

local function outInSine(t, b, c, d)
	if t < d / 2 then
		return outSine(t * 2, b, c / 2, d)
	else
		return inSine((t * 2) -d, b + c / 2, c / 2, d)
	end
end

local function inExpo(t, b, c, d)
	if t == 0 then
		return b
	else
		return c * pow(2, 10 * (t / d - 1)) + b - c * 0.001
	end
end

local function outExpo(t, b, c, d)
	if t == d then
		return b + c
	else
		return c * 1.001 * (-pow(2, -10 * t / d) + 1) + b
	end
end

local function inOutExpo(t, b, c, d)
	if t == 0 then return b end
	if t == d then return b + c end
	t = t / d * 2
	if t < 1 then
		return c / 2 * pow(2, 10 * (t - 1)) + b - c * 0.0005
	else
		t = t - 1
		return c / 2 * 1.0005 * (-pow(2, -10 * t) + 2) + b
	end
end

local function outInExpo(t, b, c, d)
	if t < d / 2 then
		return outExpo(t * 2, b, c / 2, d)
	else
		return inExpo((t * 2) - d, b + c / 2, c / 2, d)
	end
end

local function inCirc(t, b, c, d)
	t = t / d
	return(-c * (sqrt(1 - pow(t, 2)) - 1) + b)
end

local function outCirc(t, b, c, d)
	t = t / d - 1
	return(c * sqrt(1 - pow(t, 2)) + b)
end

local function inOutCirc(t, b, c, d)
	t = t / d * 2
	if t < 1 then
		return -c / 2 * (sqrt(1 - t * t) - 1) + b
	else
		t = t - 2
		return c / 2 * (sqrt(1 - t * t) + 1) + b
	end
end

local function outInCirc(t, b, c, d)
	if t < d / 2 then
		return outCirc(t * 2, b, c / 2, d)
	else
		return inCirc((t * 2) - d, b + c / 2, c / 2, d)
	end
end

local function inElastic(t, b, c, d, a, p)
	if t == 0 then return b end

	t = t / d

	if t == 1  then return b + c end

	if not p then p = d * 0.3 end

	local s

	if not a or a < abs(c) then
		a = c
		s = p / 4
	else
		s = p / (2 * pi) * asin(c/a)
	end

	t = t - 1

	return -(a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b
end

-- a: amplitud
-- p: period
local function outElastic(t, b, c, d, a, p)
	if t == 0 then return b end

	t = t / d

	if t == 1 then return b + c end

	if not p then p = d * 0.3 end

	local s

	if not a or a < abs(c) then
		a = c
		s = p / 4
	else
		s = p / (2 * pi) * asin(c/a)
	end

	return a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p) + c + b
end

-- p = period
-- a = amplitud
local function inOutElastic(t, b, c, d, a, p)
	if t == 0 then return b end

	t = t / d * 2

	if t == 2 then return b + c end

	if not p then p = d * (0.3 * 1.5) end
	if not a then a = 0 end

	if not a or a < abs(c) then
		a = c
		s = p / 4
	else
		s = p / (2 * pi) * asin(c / a)
	end

	if t < 1 then
		t = t - 1
		return -0.5 * (a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b
	else
		t = t - 1
		return a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p ) * 0.5 + c + b
	end
end

-- a: amplitud
-- p: period
local function outInElastic(t, b, c, d, a, p)
	if t < d / 2 then
		return outElastic(t * 2, b, c / 2, d, a, p)
	else
		return inElastic((t * 2) - d, b + c / 2, c / 2, d, a, p)
	end
end

local function inBack(t, b, c, d, s)
	if not s then s = 1.70158 end
	t = t / d
	return c * t * t * ((s + 1) * t - s) + b
end

local function outBack(t, b, c, d, s)
	if not s then s = 1.70158 end
	t = t / d - 1
	return c * (t * t * ((s + 1) * t + s) + 1) + b
end

local function inOutBack(t, b, c, d, s)
	if not s then s = 1.70158 end
	s = s * 1.525
	t = t / d * 2
	if t < 1 then
		return c / 2 * (t * t * ((s + 1) * t - s)) + b
	else
		t = t - 2
		return c / 2 * (t * t * ((s + 1) * t + s) + 2) + b
	end
end

local function outInBack(t, b, c, d, s)
	if t < d / 2 then
		return outBack(t * 2, b, c / 2, d, s)
	else
		return inBack((t * 2) - d, b + c / 2, c / 2, d, s)
	end
end

local function outBounce(t, b, c, d)
	t = t / d
	if t < 1 / 2.75 then
		return c * (7.5625 * t * t) + b
	elseif t < 2 / 2.75 then
		t = t - (1.5 / 2.75)
		return c * (7.5625 * t * t + 0.75) + b
	elseif t < 2.5 / 2.75 then
		t = t - (2.25 / 2.75)
		return c * (7.5625 * t * t + 0.9375) + b
	else
		t = t - (2.625 / 2.75)
		return c * (7.5625 * t * t + 0.984375) + b
	end
end

local function inBounce(t, b, c, d)
	return c - outBounce(d - t, 0, c, d) + b
end

local function inOutBounce(t, b, c, d)
	if t < d / 2 then
		return inBounce(t * 2, 0, c, d) * 0.5 + b
	else
		return outBounce(t * 2 - d, 0, c, d) * 0.5 + c * .5 + b
	end
end

local function outInBounce(t, b, c, d)
	if t < d / 2 then
		return outBounce(t * 2, b, c / 2, d)
	else
		return inBounce((t * 2) - d, b + c / 2, c / 2, d)
	end
end























--[[
Module made by FromLegoUniverse
Base tweening by Crazyman32
Easing methods by Robert Penner

---------------Usage:---------------
First note is that these modules are not like Frame:TweenPosition, the instance is an arguement
Second note is that they will run THEN continue. This is on purpose. A guide for around that will be below.	
	
CFrames:   Module:TweenCFrame(Instance Instance, String PropertyName,CFrame EndCFrame,Number Time,Enum Easing)
--For MODELS, use "SetPrimaryPartCFrame" to use :SetPrimaryPartCFrame
Vector3s:   Module:TweenVector3(Instance Instance, String PropertyName,Vector3 EndVector3,Number Time,Enum Easing)
Vector3s:   Module:TweenVector2(Instance Instance, String PropertyName,Vector2 EndVector2,Number Time,Enum Easing)
Color3s:   Module:TweenColor3(Instance Instance, String PropertyName,Color3 EndColor3,Number Time,Enum Easing)
Numbers:   Module:TweenNumber(Instance Instance, String PropertyName,Number EndNumber,Number Time,Enum Easing)
UDims:   Module:TweenUDim(Instance Instance, String PropertyName,UDim EndUDim,Number Time,Enum Easing)
UDim2s:   Module:TweenUDim2(Instance Instance, String PropertyName,UDim2 EndUDim2,Number Time,Enum Easing)

Easing Methods:

To index them, you must start with this:
	Module.Ease
	
Next, you need to decide weather it is In, Out, or InOut

	Module.Ease.In
	Module.Ease.Out
	Module.Ease.InOut
	
Finally, add the method (Replace the [Insert] with the last step)

	Module.Ease.[Inser].Linear
	Module.Ease.[Inser].Quad
	Module.Ease.[Inser].Cubic
	Module.Ease.[Inser].Quart
	Module.Ease.[Inser].Quint
	Module.Ease.[Inser].Sine
	Module.Ease.[Inser].Expo
	Module.Ease.[Inser].Circ
	Module.Ease.[Inser].Elastic
	Module.Ease.[Inser].Back
	Module.Ease.[Inser].Bounce
	
Making them act like Frame:TweenPosition()

A basic method is using spawn(). Cooroutines are more recommended.

	local Module = require(game.ServerScriptService.TweenModule)
	spawn(function()
		Module:TweenCFrame(game.Workspace.Weld, "C0",CFrame.new(),5,Module.Ease.In.Cubic)
	end)
--]]

local RenderWait do
	local rs
	if game.Players.LocalPlayer then
		rs = game:GetService("RunService").RenderStepped
	else
		rs = game:GetService("RunService").Stepped
	end
	function RenderWait()
		rs:wait()
	end
end

function CFrameToVectors(CFrame)
	local Data = {0,0,0,0,0,0,0,0,0,0,0,0}
	local i = 0
	for Number in string.gmatch(tostring(CFrame),"[%d%-.eE]+") do
		i = i + 1
		Data[i] = tonumber(Number)
	end
	return Vector3.new(Data[1],Data[2],Data[3]),Vector3.new(Data[4],Data[5],Data[6]),Vector3.new(Data[7],Data[8],Data[9]),Vector3.new(Data[10],Data[11],Data[12])
end

function EncodeVectors(V1,V2,V3,V4)
	local Data = {}
	for Number in string.gmatch(tostring(V1),"[%d%-.eE]+") do
		table.insert(Data,tonumber(Number))
	end
	for Number in string.gmatch(tostring(V2),"[%d%-.eE]+") do
		table.insert(Data,tonumber(Number))
	end
	for Number in string.gmatch(tostring(V3),"[%d%-.eE]+") do
		table.insert(Data,tonumber(Number))
	end
	for Number in string.gmatch(tostring(V4),"[%d%-.eE]+") do
		table.insert(Data,tonumber(Number))
	end
	return CFrame.new(unpack(Data))
end

function CFrameLerp(OC,CFrame,LerpNum)
	local V1,V2,V3,V4 = CFrameToVectors(CFrame)
	local OV1,OV2,OV3,OV4 = CFrameToVectors(OC)
	local V1L,V2L,V3L,V4L = OV1:lerp(V1,LerpNum),OV2:lerp(V2,LerpNum),OV3:lerp(V3,LerpNum),OV4:lerp(V4,LerpNum)
	return EncodeVectors(V1L,V2L,V3L,V4L)
end

function Tween(easingFunc, duration, callbackFunc)
	local tick = tick
	local start = tick()
	local dur = 0
	local ratio = 0
	local RW = RenderWait
	while (dur < duration) do
		ratio = easingFunc(dur, 0, 1, duration)
		dur = (tick() - start)
		callbackFunc(ratio)
		RW()
	end
	callbackFunc(1)
end

API = {}

function API:TweenCFrame(Ins,Property, cframeEnd, duration, easingFunc)
	local start
	if Ins.className == "Model" and Property == "SetPrimaryPartCFrame" then
		if Ins.PrimaryPart then
			start = Ins:GetPrimaryPartCFrame()
		else
			if game:GetService("RunService"):IsStudio() then
				warn(Ins, "need's a primary part to tween!")
			end
			return
		end
	else
		start = Ins[Property]
	end
	local cur = start
	local function Callback(ratio)
		cur = CFrameLerp(start,cframeEnd,ratio)
		if Ins.className == "Model" and Property == "SetPrimaryPartCFrame" then
			if Ins.PrimaryPart then
				Ins:SetPrimaryPartCFrame(cur)
			end
		else
			Ins[Property] = cur
		end
	end
	coroutine.wrap(Tween)(easingFunc, duration, Callback)
end

function API:TweenVector3(Ins,Property, posEnd, duration, easingFunc)
	local start = Ins[Property]
	local cur = start
	local function Callback(ratio)
		cur = start:lerp(posEnd,ratio)
		Ins[Property] = cur
	end
	coroutine.wrap(Tween)(easingFunc, duration, Callback)
end

function API:TweenColor3(Ins,Property, ColorEnd, duration, easingFunc)
	local start = Ins[Property]
	local cur = start
	local DifR,DifG,DifB = ColorEnd.r - start.r,ColorEnd.g - start.g,ColorEnd.b - start.b
	local function Callback(ratio)
		cur = Color3.new(start.r + (DifR*ratio),start.g + (DifG*ratio),start.b + (DifB*ratio))
		Ins[Property] = cur
	end
	coroutine.wrap(Tween)(easingFunc, duration, Callback)
end

function API:TweenNumber(Ins,Property, End, duration, easingFunc)
	local start = Ins[Property]
	local cur = start
	local Dif = End - start
	local function Callback(ratio)
		cur = start + (Dif*ratio)
		Ins[Property] = cur
	end
	coroutine.wrap(Tween)(easingFunc, duration, Callback)
end

function API:TweenVector2(Ins,Property, End, duration, easingFunc)
	local start = Ins[Property]
	local cur = start
	local Dif = End - start
	local function Callback(ratio)
		cur = start + (Dif*ratio)
		Ins[Property] = cur
	end
	coroutine.wrap(Tween)(easingFunc, duration, Callback)
end

function API:TweenUDim2(Ins,Property, End, duration, easingFunc)
	local start = Ins[Property]
	local cur = start
	local DifX1,DifX2,DifY1,DifY2 = End.X.Scale - start.X.Scale,End.X.Offset - start.X.Offset,End.Y.Scale - start.Y.Scale,End.Y.Offset - start.Y.Offset
	local function Callback(ratio)
		cur = UDim2.new(start.X.Scale + (DifX1*ratio),start.X.Offset + (DifX2*ratio),start.Y.Scale + (DifY1*ratio),start.Y.Offset + (DifY2*ratio))
		Ins[Property] = cur
	end
	coroutine.wrap(Tween)(easingFunc, duration, Callback)
end

function API:TweenUDim(Ins,Property, End, duration, easingFunc)
	local start = Ins[Property]
	local cur = start
	local Dif1,Dif2 = End.Scale - start.Scale,End.Offset - start.Offset
	local function Callback(ratio)
		cur = UDim2.new(start.Scale + (Dif1*ratio),start.Offset + (Dif2*ratio))
		Ins[Property] = cur
	end
	coroutine.wrap(Tween)(easingFunc, duration, Callback)
end

--Rest is by Crazyman32 with slight modifications, for "easing" methods

API.Ease = (function()
	local Easing = {
		linear = linear,
		inQuad = inQuad,
		outQuad = outQuad,
		inOutQuad = inOutQuad,
		outInQuad = outInQuad,
		inCubic  = inCubic ,
		outCubic = outCubic,
		inOutCubic = inOutCubic,
		outInCubic = outInCubic,
		inQuart = inQuart,
		outQuart = outQuart,
		inOutQuart = inOutQuart,
		outInQuart = outInQuart,
		inQuint = inQuint,
		outQuint = outQuint,
		inOutQuint = inOutQuint,
		outInQuint = outInQuint,
		inSine = inSine,
		outSine = outSine,
		inOutSine = inOutSine,
		outInSine = outInSine,
		inExpo = inExpo,
		outExpo = outExpo,
		inOutExpo = inOutExpo,
		outInExpo = outInExpo,
		inCirc = inCirc,
		outCirc = outCirc,
		inOutCirc = inOutCirc,
		outInCirc = outInCirc,
		inElastic = inElastic,
		outElastic = outElastic,
		inOutElastic = inOutElastic,
		outInElastic = outInElastic,
		inBack = inBack,
		outBack = outBack,
		inOutBack = inOutBack,
		outInBack = outInBack,
		inBounce = inBounce,
		outBounce = outBounce,
		inOutBounce = inOutBounce,
		outInBounce = outInBounce,
	}
	
	local In, Out, InOut = {}, {}, {}
	for name,func in pairs(Easing) do	-- "Parse" out the easing functions:
		if (name == "linear") then
			In["Linear"] = func
			Out["Linear"] = func
			InOut["Linear"] = func
		else
			local t,n = name:match("^(inOut)(.+)")
			if (not t or not n) then t,n = name:match("^(in)(.+)") end
			if (not t or not n) then t,n = name:match("^(out)(.+)") end
			if (n) then
				n = (n:sub(1, 1):upper() .. n:sub(2):lower())
			end
			if (t == "inOut") then
				InOut[n] = func
			elseif (t == "in") then
				In[n] = func
			elseif (t == "out") then
				Out[n] = func
			end
		end
	end
	return {In=In,Out=Out,InOut=InOut}
end)();

return API
